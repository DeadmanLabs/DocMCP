{
  "type": "interface",
  "name": "IBlockEntityExtension",
  "qualified_name": "net.neoforged.neoforge.common.extensions.IBlockEntityExtension",
  "package": "net.neoforged.neoforge.common.extensions",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "self",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "return_type": "BlockEntity",
      "parameters": [],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onDataPacket",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "net",
          "type": "Connection",
          "annotations": []
        },
        {
          "name": "pkt",
          "type": "ClientboundBlockEntityDataPacket",
          "annotations": []
        },
        {
          "name": "lookupProvider",
          "type": "HolderLookup.Provider",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when you receive a TileEntityData packet for the location this TileEntity is currently in. On the client, the NetworkManager will always be the remote server. On the server, it will be whomever is responsible for sending the packet.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "handleUpdateTag",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "tag",
          "type": "CompoundTag",
          "annotations": []
        },
        {
          "name": "lookupProvider",
          "type": "HolderLookup.Provider",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when the chunk's TE update tag, gotten from BlockEntity.getUpdateTag(HolderLookup.Provider) , is received on the client. Used to handle this tag in a special way. By default this simply calls BlockEntity.loadWithComponents(CompoundTag, HolderLookup.Provider) .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getPersistentData",
      "modifiers": [],
      "annotations": [],
      "return_type": "CompoundTag",
      "parameters": [],
      "exceptions": [],
      "description": "Gets a CompoundTag that can be used to store custom data for this block entity. It will be written, and read from disc, so it persists over world saves.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onChunkUnloaded",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onLoad",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [],
      "exceptions": [],
      "description": "Called when this is first added to the world (by LevelChunk.addAndRegisterBlockEntity(BlockEntity) ) or right before the first tick when the chunk is generated or loaded from disk. Override instead of adding if (firstTick) stuff in update.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "requestModelDataUpdate",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [],
      "exceptions": [],
      "description": "Requests a refresh for the model data of your TE Call this every time your getModelData() changes",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getModelData",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "ModelData",
      "parameters": [],
      "exceptions": [],
      "description": "Allows you to return additional model data. This data can be used to provide additional functionality in your BakedModel You need to schedule a refresh of you model data via requestModelDataUpdate() if the result of this function changes. Note that this method may be called on a chunk render thread instead of the main client thread",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "hasCustomOutlineRendering",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Returns whether this BlockEntity has custom outline rendering behavior.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "invalidateCapabilities",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@NonExtendable"
      ],
      "return_type": "void",
      "parameters": [],
      "exceptions": [],
      "description": "Notify all listeners that the capabilities at the positions of this block entity might have changed. This includes new capabilities becoming available. This is just a convenience method for ILevelExtension.invalidateCapabilities(BlockPos) .",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/common/extensions/IBlockEntityExtension.html"
}