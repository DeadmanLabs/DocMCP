{
  "type": "interface",
  "name": "IItemStackExtension",
  "qualified_name": "net.neoforged.neoforge.common.extensions.IItemStackExtension",
  "package": "net.neoforged.neoforge.common.extensions",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "self",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "return_type": "ItemStack",
      "parameters": [],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getCraftingRemainingItem",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "ItemStack",
      "parameters": [],
      "exceptions": [],
      "description": "ItemStack sensitive version of Item.getCraftingRemainingItem() . Returns a full ItemStack instance of the result.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "hasCraftingRemainingItem",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [],
      "exceptions": [],
      "description": "ItemStack sensitive version of Item.hasCraftingRemainingItem() .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getBurnTime",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "recipeType",
          "type": "RecipeType <?>",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "Returns the fuel burn time for this item stack. If it is zero, this item is not a fuel. Will never return a negative value.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onItemUseFirst",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "InteractionResult",
      "parameters": [
        {
          "name": "context",
          "type": "UseOnContext",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canPerformAction",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "toolAction",
          "type": "ToolAction",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Queries if an item can perform the given action. See ToolActions for a description of each stock action",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "shouldCauseBlockBreakReset",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "newStack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when the player is mining a block and the item in his hand changes. Allows to not reset blockbreaking if only NBT or similar changes.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isPrimaryItemFor",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "enchantment",
          "type": "Holder < Enchantment >",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getEnchantmentLevel",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "enchantment",
          "type": "Holder < Enchantment >",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Gets the gameplay level of the target enchantment on this stack. Use in place of EnchantmentHelper.getTagEnchantmentLevel(net.minecraft.core.Holder<net.minecraft.world.item.enchantment.Enchantment>, net.minecraft.world.item.ItemStack) for gameplay logic. Use EnchantmentHelper.getEnchantmentsForCrafting(net.minecraft.world.item.ItemStack) and EnchantmentHelper.setEnchantments(net.minecraft.world.item.ItemStack, net.minecraft.world.item.enchantment.ItemEnchantments) when modifying the item's enchantments.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getAllEnchantments",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "ItemEnchantments",
      "parameters": [
        {
          "name": "lookup",
          "type": "HolderLookup.RegistryLookup < Enchantment >",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Gets the gameplay level of all enchantments on this stack. Use in place of ItemStack.getTagEnchantments() for gameplay logic. Use EnchantmentHelper.getEnchantmentsForCrafting(net.minecraft.world.item.ItemStack) and EnchantmentHelper.setEnchantments(net.minecraft.world.item.ItemStack, net.minecraft.world.item.enchantment.ItemEnchantments) when modifying the item's enchantments.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getEnchantmentValue",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [],
      "exceptions": [],
      "description": "ItemStack sensitive version of Item.getEnchantmentValue() .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getEquipmentSlot",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable EquipmentSlot",
      "parameters": [],
      "exceptions": [],
      "description": "Override this to set a non-default armor slot for an ItemStack, but do not use this to get the armor slot of said stack; for that, use LivingEntity.getEquipmentSlotForItem(ItemStack) .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canDisableShield",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "shield",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "attacker",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Can this Item disable a shield",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onEntitySwing",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when a entity tries to play the 'swing' animation.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onStopUsing",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "count",
          "type": "int",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when an entity stops using an item item for any reason.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getEntityLifespan",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "level",
          "type": "Level",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Retrieves the normal 'lifespan' of this item when it is dropped on the ground as a EntityItem. This is in ticks, standard result is 6000, or 5 mins.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onEntityItemUpdate",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "ItemEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by the default implemetation of EntityItem's onUpdate method, allowing for cleaner control over the update of the item without having to write a subclass.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getXpRepairRatio",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "float",
      "parameters": [],
      "exceptions": [],
      "description": "Determines the amount of durability the mending enchantment will repair, on average, per point of experience.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onAnimalArmorTick",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "level",
          "type": "Level",
          "annotations": []
        },
        {
          "name": "horse",
          "type": "Mob",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called every tick when this item is equipped as an armor item by a horse invalid reference Mob#canWearBodyArmor() that can wear armor}. In vanilla, only horses and wolves can wear armor, and they can only equip items that extend AnimalArmorItem .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canEquip",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "armorType",
          "type": "EquipmentSlot",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Determines if the specific ItemStack can be placed in the specified armor slot, for the entity.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isBookEnchantable",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "book",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Allow or forbid the specific book/item combination as an anvil enchant",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onDroppedByPlayer",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when a player drops the item into the world, returning false from this will prevent the item from being removed from the players inventory and spawning in the world",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getHighlightTip",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "Component",
      "parameters": [
        {
          "name": "displayName",
          "type": "Component",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Allow the item one last chance to modify its name used for the tool highlight useful for adding something extra that can't be removed by a user in the displayed name, such as a mode of operation.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "doesSneakBypassUse",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "level",
          "type": "LevelReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Should this item, when held, allow sneak-clicks to pass through to the underlying block?",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isRepairable",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [],
      "exceptions": [],
      "description": "Determines if a item is reparable, used by Repair recipes and Grindstone.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isPiglinCurrency",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [],
      "exceptions": [],
      "description": "Called by Piglins when checking to see if they will give an item or something in exchange for this item.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "makesPiglinsNeutral",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "wearer",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by Piglins to check if a given item prevents hostility on sight. If this is true the Piglins will be neutral to the entity wearing this item, and will not attack on sight. Note: This does not prevent Piglins from becoming hostile due to other actions, nor does it make Piglins that are already hostile stop being so.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isEnderMask",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "endermanEntity",
          "type": "EnderMan",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Whether this Item can be used to hide player head for enderman.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canElytraFly",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Used to determine if the player can use Elytra flight. This is called Client and Server side.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "elytraFlightTick",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "flightTicks",
          "type": "int",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Used to determine if the player can continue Elytra flight, this is called each tick, and can be used to apply ItemStack damage, consume Energy, or what have you. For example the Vanilla implementation of this, applies damage to the ItemStack every 20 ticks.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canWalkOnPowderedSnow",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "wearer",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by the powdered snow block to check if a living entity wearing this can walk on the snow, granting the same behavior as leather boots. Only affects items worn in the boots slot.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getSweepHitBox",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "AABB",
      "parameters": [
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "target",
          "type": "Entity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Get a bounding box ( AABB ) of a sweep attack.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onDestroyed",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "itemEntity",
          "type": "ItemEntity",
          "annotations": []
        },
        {
          "name": "damageSource",
          "type": "DamageSource",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when an item entity for this stack is destroyed. Note: The ItemStack can be retrieved from the item entity.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getFoodProperties",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable FoodProperties",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "Get the food properties for this item. This is a bouncer for easier use of IItemExtension.getFoodProperties(ItemStack, LivingEntity) The @Nullable annotation was only added, due to the default method, also being @Nullable. Use this with a grain of salt, as if you return null here and true at invalid reference Item#isEdible() , NPEs will occur!",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isNotReplaceableByPickAction",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "inventorySlot",
          "type": "int",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Whether this stack should be excluded (if possible) when selecting the target hotbar slot of a \"pick\" action. By default, this returns true for enchanted stacks.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canGrindstoneRepair",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [],
      "exceptions": [],
      "description": "Returns true if the given ItemStack can be put into a grindstone to be repaired and/or stripped of its enchantments.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getCapability",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "capability",
          "type": "ItemCapability <T, C>",
          "annotations": []
        },
        {
          "name": "context",
          "type": "C",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getCapability",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "capability",
          "type": "ItemCapability <T, Void >",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getAttributeModifiers",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "ItemAttributeModifiers",
      "parameters": [],
      "exceptions": [],
      "description": "Computes the gameplay attribute modifiers for this item stack. Used in place of direct access to invalid reference DataComponents.ATTRIBUTE_MODIFIERS or IItemExtension.getDefaultAttributeModifiers(ItemStack) when querying attributes for gameplay purposes. This method first computes the default modifiers, using invalid reference DataComponents.ATTRIBUTE_MODIFIERS if present, otherwise falling back to IItemExtension.getDefaultAttributeModifiers(ItemStack) . The invalid reference ItemAttributeModifiersEvent is then fired to allow external adjustments.",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/common/extensions/IItemStackExtension.html"
}