{
  "type": "interface",
  "name": "IItemExtension",
  "qualified_name": "net.neoforged.neoforge.common.extensions.IItemExtension",
  "package": "net.neoforged.neoforge.common.extensions",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "self",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "return_type": "Item",
      "parameters": [],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getDefaultAttributeModifiers",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "ItemAttributeModifiers",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "ItemStack sensitive version of getDefaultAttributeModifiers. Used when a stack has no DataComponents.ATTRIBUTE_MODIFIERS component.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onDroppedByPlayer",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "item",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when a player drops the item into the world, returning false from this will prevent the item from being removed from the players inventory and spawning in the world",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getHighlightTip",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "Component",
      "parameters": [
        {
          "name": "item",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "displayName",
          "type": "Component",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Allow the item one last chance to modify its name used for the tool highlight useful for adding something extra that can't be removed by a user in the displayed name, such as a mode of operation.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onItemUseFirst",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "InteractionResult",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "context",
          "type": "UseOnContext",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "This is called when the item is used, before the block is activated.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isPiglinCurrency",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by Piglins when checking to see if they will give an item or something in exchange for this item.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "makesPiglinsNeutral",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "wearer",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by Piglins to check if a given item prevents hostility on sight. If this is true the Piglins will be neutral to the entity wearing this item, and will not attack on sight. Note: This does not prevent Piglins from becoming hostile due to other actions, nor does it make Piglins that are already hostile stop being so.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isRepairable",
      "modifiers": [],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by CraftingManager to determine if an item is reparable.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getXpRepairRatio",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "float",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Determines the amount of durability the mending enchantment will repair, on average, per 0.5 points of experience.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onStopUsing",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "count",
          "type": "int",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when an entity stops using an item for any reason, notably when selecting another item without releasing or finishing. This method is called in addition to any other hooks called when an item is finished using; when another hook is also called it will be called before this method. Note that if you break an item while using it (that is, it becomes empty without swapping the stack instance), this hook may not be called on the serverside as you are technically still using the empty item (thus this hook is called on air instead). It is necessary to call LivingEntity.stopUsingItem() as part of your invalid reference ItemStack#hurtAndBreak(int, LivingEntity, Consumer) callback to prevent this issue. For most uses, you likely want one of the following: Item.finishUsingItem(ItemStack, Level, LivingEntity) for when the player releases and enough ticks have passed Item.releaseUsing(ItemStack, Level, LivingEntity, int) (ItemStack, Level, LivingEntity)} for when the player releases but the full timer has not passed",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onLeftClickEntity",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "Entity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when the player Left Clicks (attacks) an entity. Processed before damage is done, if return value is true further processing is canceled and the entity is not attacked.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getCraftingRemainingItem",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "ItemStack sensitive version of Item.getCraftingRemainingItem() . Returns a full ItemStack instance of the result.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "hasCraftingRemainingItem",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "ItemStack sensitive version of Item.hasCraftingRemainingItem() .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getEntityLifespan",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "level",
          "type": "Level",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Retrieves the normal 'lifespan' of this item when it is dropped on the ground as a EntityItem. This is in ticks, standard result is 6000, or 5 mins.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "hasCustomEntity",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Determines if this Item has a special entity for when they are in the world. Is called when a EntityItem is spawned in the world, if true and Item#createCustomEntity returns non null, the EntityItem will be destroyed and the new Entity will be added to the world.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "createEntity",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable Entity",
      "parameters": [
        {
          "name": "level",
          "type": "Level",
          "annotations": []
        },
        {
          "name": "location",
          "type": "Entity",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "This function should return a new entity to replace the dropped item. Returning null here will not kill the EntityItem and will leave it to function normally. Called when the item it placed in a level.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onEntityItemUpdate",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "ItemEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by the default implemetation of EntityItem's onUpdate method, allowing for cleaner control over the update of the item without having to write a subclass.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "doesSneakBypassUse",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "level",
          "type": "LevelReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Should this item, when held, allow sneak-clicks to pass through to the underlying block?",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canEquip",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "armorType",
          "type": "EquipmentSlot",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Determines if the specific ItemStack can be placed in the specified armor slot, for the entity.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getEquipmentSlot",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable EquipmentSlot",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Override this to set a non-default armor slot for an ItemStack, but do not use this to get the armor slot of said stack; for that, use LivingEntity.getEquipmentSlotForItem(ItemStack) ..",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isBookEnchantable",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "book",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Allow or forbid the specific book/item combination as an anvil enchant",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getArmorTexture",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable ResourceLocation",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "Entity",
          "annotations": []
        },
        {
          "name": "slot",
          "type": "EquipmentSlot",
          "annotations": []
        },
        {
          "name": "layer",
          "type": "ArmorMaterial.Layer",
          "annotations": []
        },
        {
          "name": "innerModel",
          "type": "boolean",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by RenderBiped and RenderPlayer to determine the armor texture that should be use for the currently equipped item. This will only be called on instances of ItemArmor. Returning null from this function will use the default value.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onEntitySwing",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when a entity tries to play the 'swing' animation.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getDamage",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Return the itemDamage represented by this ItemStack. Defaults to the Damage entry in the stack NBT, but can be overridden here for other sources.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getMaxDamage",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Return the maxDamage for this ItemStack. Defaults to the maxDamage field in this item, but can be overridden here for other sources such as NBT.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isDamaged",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Return if this itemstack is damaged. Note only called if ItemStack.isDamageableItem() is true.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "setDamage",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "damage",
          "type": "int",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Set the damage for this itemstack. Note, this method is responsible for zero checking.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canPerformAction",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "toolAction",
          "type": "ToolAction",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Queries if an item can perform the given action. See ToolActions for a description of each stock action",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getMaxStackSize",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Gets the maximum number of items that this stack should be able to hold.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getEnchantmentValue",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "ItemStack sensitive version of Item.getEnchantmentValue() .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isPrimaryItemFor",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@OverrideOnly"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "enchantment",
          "type": "Holder < Enchantment >",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Checks if an item should be treated as a primary item for a given enchantment. Primary items are those that are able to receive the enchantment during enchanting, either from the enchantment table or other random enchantment mechanisms. As a special case, books are primary items for every enchantment. Other application mechanisms, such as the anvil, check Enchantment.isSupportedItem(ItemStack) instead. If you want those mechanisms to be able to apply an enchantment, you will need to add your item to the relevant tag.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getEnchantmentLevel",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@OverrideOnly"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "enchantment",
          "type": "Holder < Enchantment >",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Gets the level of the enchantment currently present on the stack. By default, returns the enchantment level present in NBT. Most enchantment implementations rely upon this method. The returned value must be the same as getting the enchantment from getAllEnchantments(net.minecraft.world.item.ItemStack, net.minecraft.core.HolderLookup.RegistryLookup<net.minecraft.world.item.enchantment.Enchantment>)",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getAllEnchantments",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@OverrideOnly"
      ],
      "return_type": "ItemEnchantments",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "lookup",
          "type": "HolderLookup.RegistryLookup < Enchantment >",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Gets a map of all enchantments present on the stack. By default, returns the enchantments present in NBT. Used in several places in code including armor enchantment hooks. The returned value(s) must have the same level as getEnchantmentLevel(net.minecraft.world.item.ItemStack, net.minecraft.core.Holder<net.minecraft.world.item.enchantment.Enchantment>) .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "shouldCauseReequipAnimation",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "oldStack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "newStack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "slotChanged",
          "type": "boolean",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Determine if the player switching between these two item stacks",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "shouldCauseBlockBreakReset",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "oldStack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "newStack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when the player is mining a block and the item in his hand changes. Allows to not reset blockbreaking if only NBT or similar changes.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canContinueUsing",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "oldStack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "newStack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called while an item is in 'active' use to determine if usage should continue. Allows items to continue being used while sustaining damage, for example.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getCreatorModId",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable String",
      "parameters": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called to get the Mod ID of the mod that *created* the ItemStack, instead of the real Mod ID that *registered* it. For example the Forge Universal Bucket creates a subitem for each modded fluid, and it returns the modded fluid's Mod ID here. Mods that register subitems for other mods can override this. Informational mods can call it to show the mod that created the item.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canDisableShield",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "shield",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "attacker",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Can this Item disable a shield",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getBurnTime",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@OverrideOnly"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "recipeType",
          "type": "RecipeType <?>",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onAnimalArmorTick",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@OverrideOnly"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "level",
          "type": "Level",
          "annotations": []
        },
        {
          "name": "horse",
          "type": "Mob",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called every tick when this item is equipped as an armor item by a horse invalid reference that can wear armor . In vanilla, only horses and wolves can wear armor, and they can only equip items that extend AnimalArmorItem .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "damageItem",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "amount",
          "type": "int",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "T",
          "annotations": [
            "@Nullable"
          ]
        },
        {
          "name": "onBroken",
          "type": "Consumer < Item >",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Reduce the durability of this item by the amount given. This can be used to e.g. consume power from NBT before durability.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "onDestroyed",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "itemEntity",
          "type": "ItemEntity",
          "annotations": []
        },
        {
          "name": "damageSource",
          "type": "DamageSource",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called when an item entity for this stack is destroyed. Note: The ItemStack can be retrieved from the item entity.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isEnderMask",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "endermanEntity",
          "type": "EnderMan",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Whether this Item can be used to hide player head for enderman.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canElytraFly",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Used to determine if the player can use Elytra flight. This is called Client and Server side.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "elytraFlightTick",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "flightTicks",
          "type": "int",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Used to determine if the player can continue Elytra flight, this is called each tick, and can be used to apply ItemStack damage, consume Energy, or what have you. For example the Vanilla implementation of this, applies damage to the ItemStack every 20 ticks.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canWalkOnPowderedSnow",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "wearer",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Called by the powdered snow block to check if a living entity wearing this can walk on the snow, granting the same behavior as leather boots. Only affects items worn in the boots slot.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isDamageable",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Used to test if this item can be damaged, but with the ItemStack in question. Please note that in some cases no ItemStack is available, so the stack-less method will be used.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getSweepHitBox",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "AABB",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "target",
          "type": "Entity",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Get a bounding box ( AABB ) of a sweep attack.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getFoodProperties",
      "modifiers": [
        "default"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable FoodProperties",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "Get the food properties for this item. Use this instead of the invalid reference Item#getFoodProperties() method, for ItemStack sensitivity. The @Nullable annotation was only added, due to the default method, also being @Nullable. Use this with a grain of salt, as if you return null here and true at invalid reference Item#isEdible() , NPEs will occur!",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isNotReplaceableByPickAction",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "inventorySlot",
          "type": "int",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Whether the given ItemStack should be excluded (if possible) when selecting the target hotbar slot of a \"pick\" action. By default, this returns true for enchanted stacks.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "canGrindstoneRepair",
      "modifiers": [
        "default"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Returns true if the given ItemStack can be put into a grindstone to be repaired and/or stripped of its enchantments.",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/common/extensions/IItemExtension.html"
}