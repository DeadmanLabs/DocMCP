{
  "type": "class",
  "name": "ExistingFileHelper",
  "qualified_name": "net.neoforged.neoforge.common.data.ExistingFileHelper",
  "package": "net.neoforged.neoforge.common.data",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "Enables data providers to check if other data files currently exist. The instance provided in the GatherDataEvent utilizes the standard resources (via VanillaPackResources ), forge's resources, as well as any extra resource packs passed in via the --existing argument, or mod resources via the --existing-mod argument.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [
    "ExistingFileHelper.IResourceType",
    "ExistingFileHelper.ResourceType"
  ],
  "fields": [
    {
      "name": "clientResources",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [],
      "type": "MultiPackResourceManager",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "serverData",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [],
      "type": "MultiPackResourceManager",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "enable",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [],
      "type": "boolean",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "generated",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [],
      "type": "com.google.common.collect.Multimap< PackType , ResourceLocation >",
      "value": null,
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "ExistingFileHelper",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "parameters": [
        {
          "name": "existingPacks",
          "type": "Collection < Path >",
          "annotations": []
        },
        {
          "name": "existingMods",
          "type": "Set < String >",
          "annotations": []
        },
        {
          "name": "enable",
          "type": "boolean",
          "annotations": []
        },
        {
          "name": "assetIndex",
          "type": "String",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        },
        {
          "name": "assetsDir",
          "type": "File",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "Create a new helper. This should probably NOT be used by mods, as the instance provided by forge is designed to be a central instance that tracks existence of generated data. Only create a new helper if you intentionally want to ignore the existence of other generated files.",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "getManager",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "return_type": "ResourceManager",
      "parameters": [
        {
          "name": "packType",
          "type": "PackType",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getLocation",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "return_type": "ResourceLocation",
      "parameters": [
        {
          "name": "base",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "suffix",
          "type": "String",
          "annotations": []
        },
        {
          "name": "prefix",
          "type": "String",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "exists",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "loc",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "packType",
          "type": "PackType",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Check if a given resource exists in the known resource packs.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "exists",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "loc",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "type",
          "type": "ExistingFileHelper.IResourceType",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Check if a given resource exists in the known resource packs. This is a convenience method to avoid repeating type/prefix/suffix and instead use the common definitions in ExistingFileHelper.ResourceType , or a custom ExistingFileHelper.IResourceType definition.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "exists",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "loc",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "packType",
          "type": "PackType",
          "annotations": []
        },
        {
          "name": "pathSuffix",
          "type": "String",
          "annotations": []
        },
        {
          "name": "pathPrefix",
          "type": "String",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Check if a given resource exists in the known resource packs.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "trackGenerated",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "loc",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "type",
          "type": "ExistingFileHelper.IResourceType",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Track the existence of a generated file. This is a convenience method to avoid repeating type/prefix/suffix and instead use the common definitions in ExistingFileHelper.ResourceType , or a custom ExistingFileHelper.IResourceType definition. This should be called by data providers immediately when a new data object is created, i.e. not during run but instead when the \"builder\" (or whatever intermediate object) is created, such as a ModelBuilder . This represents a promise to generate the file later, since other datagen may rely on this file existing.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "trackGenerated",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "loc",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "packType",
          "type": "PackType",
          "annotations": []
        },
        {
          "name": "pathSuffix",
          "type": "String",
          "annotations": []
        },
        {
          "name": "pathPrefix",
          "type": "String",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Track the existence of a generated file. This should be called by data providers immediately when a new data object is created, i.e. not during run but instead when the \"builder\" (or whatever intermediate object) is created, such as a ModelBuilder . This represents a promise to generate the file later, since other datagen may rely on this file existing.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getResource",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@VisibleForTesting"
      ],
      "return_type": "Resource",
      "parameters": [
        {
          "name": "loc",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "packType",
          "type": "PackType",
          "annotations": []
        },
        {
          "name": "pathSuffix",
          "type": "String",
          "annotations": []
        },
        {
          "name": "pathPrefix",
          "type": "String",
          "annotations": []
        }
      ],
      "exceptions": [
        "FileNotFoundException"
      ],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getResource",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@VisibleForTesting"
      ],
      "return_type": "Resource",
      "parameters": [
        {
          "name": "loc",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "packType",
          "type": "PackType",
          "annotations": []
        }
      ],
      "exceptions": [
        "FileNotFoundException"
      ],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getResourceStack",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@VisibleForTesting"
      ],
      "return_type": "List < Resource >",
      "parameters": [
        {
          "name": "loc",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "packType",
          "type": "PackType",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isEnabled",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/common/data/ExistingFileHelper.html"
}