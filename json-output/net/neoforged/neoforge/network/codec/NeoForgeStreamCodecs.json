{
  "type": "class",
  "name": "NeoForgeStreamCodecs",
  "qualified_name": "net.neoforged.neoforge.network.codec.NeoForgeStreamCodecs",
  "package": "net.neoforged.neoforge.network.codec",
  "modifiers": [
    "public",
    "final",
    "class"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [
    "NeoForgeStreamCodecs.LazyStreamCodec"
  ],
  "fields": [
    {
      "name": "UNBOUNDED_BYTE_ARRAY",
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "annotations": [],
      "type": "StreamCodec < FriendlyByteBuf , byte[]>",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "CHUNK_POS",
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "annotations": [],
      "type": "StreamCodec < FriendlyByteBuf , ChunkPos >",
      "value": null,
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "NeoForgeStreamCodecs",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "parameters": [],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "lazy",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "StreamCodec <B, V>",
      "parameters": [
        {
          "name": "streamCodecSupplier",
          "type": "Supplier < StreamCodec <B, V>>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "enumCodec",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "StreamCodec <B, V>",
      "parameters": [
        {
          "name": "enumClass",
          "type": "Class <V>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "registryKey",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "StreamCodec <B, ResourceKey <? extends Registry <?>>>",
      "parameters": [],
      "exceptions": [],
      "description": "Creates a stream codec to encode and decode a ResourceKey that identifies a registry.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "connectionAware",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "StreamCodec < RegistryFriendlyByteBuf , V>",
      "parameters": [
        {
          "name": "neoForgeCodec",
          "type": "StreamCodec <? super RegistryFriendlyByteBuf , V>",
          "annotations": []
        },
        {
          "name": "otherCodec",
          "type": "StreamCodec <? super RegistryFriendlyByteBuf , V>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Creates a stream codec that uses different implementation depending on the ConnectionType . Should be used to keep vanilla connection compatibility.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "uncheckedUnit",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "StreamCodec <B, V>",
      "parameters": [
        {
          "name": "defaultValue",
          "type": "V",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Similar to StreamCodec.unit(Object) , but without checks for the value to be encoded.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "composite",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "StreamCodec <B, C>",
      "parameters": [
        {
          "name": "codec1",
          "type": "StreamCodec <? super B, T1>",
          "annotations": []
        },
        {
          "name": "getter1",
          "type": "Function <C, T1>",
          "annotations": []
        },
        {
          "name": "codec2",
          "type": "StreamCodec <? super B, T2>",
          "annotations": []
        },
        {
          "name": "getter2",
          "type": "Function <C, T2>",
          "annotations": []
        },
        {
          "name": "codec3",
          "type": "StreamCodec <? super B, T3>",
          "annotations": []
        },
        {
          "name": "getter3",
          "type": "Function <C, T3>",
          "annotations": []
        },
        {
          "name": "codec4",
          "type": "StreamCodec <? super B, T4>",
          "annotations": []
        },
        {
          "name": "getter4",
          "type": "Function <C, T4>",
          "annotations": []
        },
        {
          "name": "codec5",
          "type": "StreamCodec <? super B, T5>",
          "annotations": []
        },
        {
          "name": "getter5",
          "type": "Function <C, T5>",
          "annotations": []
        },
        {
          "name": "codec6",
          "type": "StreamCodec <? super B, T6>",
          "annotations": []
        },
        {
          "name": "getter6",
          "type": "Function <C, T6>",
          "annotations": []
        },
        {
          "name": "codec7",
          "type": "StreamCodec <? super B, T7>",
          "annotations": []
        },
        {
          "name": "getter7",
          "type": "Function <C, T7>",
          "annotations": []
        },
        {
          "name": "p_331335_",
          "type": "com.mojang.datafixers.util.Function7<T1, T2, T3, T4, T5, T6, T7, C>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/network/codec/NeoForgeStreamCodecs.html"
}