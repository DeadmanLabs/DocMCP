{
  "type": "class",
  "name": "PayloadRegistrar",
  "qualified_name": "net.neoforged.neoforge.network.registration.PayloadRegistrar",
  "package": "net.neoforged.neoforge.network.registration",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "Builder-style helper for registering CustomPacketPayload s, used for modded networking.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "version",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "type": "String",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "optional",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "type": "boolean",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "thread",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "type": "HandlerThread",
      "value": null,
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "PayloadRegistrar",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "parameters": [
        {
          "name": "version",
          "type": "String",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "PayloadRegistrar",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "parameters": [
        {
          "name": "source",
          "type": "PayloadRegistrar",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "playToClient",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super RegistryFriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a client-bound payload for the play phase.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "playToServer",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super RegistryFriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a server-bound payload for the play phase.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "playBidirectional",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super RegistryFriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a bidirectional payload for the play phase. Consider using DirectionalPayloadHandler to wrap client and server handlers.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "configurationToClient",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super FriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a client-bound payload for the configuration phase.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "configurationToServer",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super FriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a server-bound payload for the configuration phase.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "configurationBidirectional",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super FriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a bidirectional payload for the configuration phase. Consider using DirectionalPayloadHandler to wrap client and server handlers.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "commonToClient",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super FriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a client-bound payload for all phases.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "commonToServer",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super FriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a server-bound payload for all phases.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "commonBidirectional",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "reader",
          "type": "StreamCodec <? super FriendlyByteBuf , T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers a bidirectional payload for all phases. Consider using DirectionalPayloadHandler to wrap client and server handlers.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "executesOn",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "thread",
          "type": "HandlerThread",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Creates a copy of this registrar with a different default handling thread. When the handling thread is set to HandlerThread.MAIN , all registered handlers will be wrapped in MainThreadPayloadHandler . The initial handling thread is HandlerThread.MAIN .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "versioned",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "version",
          "type": "String",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Creates a copy of this registrar with a different version. Payloads registered with the returned copy will use the passed version, instead of the version from the constructor. On Neo-Neo connections, the connection will only succeed if all registered payloads have the same version. On other connections, the payload version is ignored, since only Neo knows how to communicate Neo payload versions.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "optional",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "PayloadRegistrar",
      "parameters": [],
      "exceptions": [],
      "description": "Creates a copy of this registrar with optional mode enabled. Payloads registered with the returned copy will be marked as optional. If any non-optional payloads are missing during a connection attempt, the connection will fail.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "register",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "type",
          "type": "CustomPacketPayload.Type <T>",
          "annotations": []
        },
        {
          "name": "codec",
          "type": "StreamCodec <? super B, T>",
          "annotations": []
        },
        {
          "name": "handler",
          "type": "IPayloadHandler <T>",
          "annotations": []
        },
        {
          "name": "protocols",
          "type": "List < ConnectionProtocol >",
          "annotations": []
        },
        {
          "name": "flow",
          "type": "Optional < PacketFlow >",
          "annotations": []
        },
        {
          "name": "version",
          "type": "String",
          "annotations": []
        },
        {
          "name": "optional",
          "type": "boolean",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/network/registration/PayloadRegistrar.html"
}