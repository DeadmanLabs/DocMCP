{
  "type": "class",
  "name": "RegisterCapabilitiesEvent",
  "qualified_name": "net.neoforged.neoforge.capabilities.RegisterCapabilitiesEvent",
  "package": "net.neoforged.neoforge.capabilities",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "Fired to register capability providers at an appropriate time.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [
    {
      "name": "RegisterCapabilitiesEvent",
      "modifiers": [],
      "annotations": [],
      "parameters": [],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "registerBlock",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "capability",
          "type": "BlockCapability <T, C>",
          "annotations": []
        },
        {
          "name": "provider",
          "type": "IBlockCapabilityProvider <T, C>",
          "annotations": []
        },
        {
          "name": "blocks",
          "type": "Block ...",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Register a capability provider for some blocks. If a previously returned capability is not valid anymore, or if a new capability is available, ILevelExtension.invalidateCapabilities(BlockPos) MUST be called to notify the caches. See IBlockCapabilityProvider for details.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "registerBlockEntity",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "capability",
          "type": "BlockCapability <T, C>",
          "annotations": []
        },
        {
          "name": "blockEntityType",
          "type": "BlockEntityType <BE>",
          "annotations": []
        },
        {
          "name": "provider",
          "type": "ICapabilityProvider <? super BE, C, T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Register a capability provider for a block entity type. If a previously returned capability is not valid anymore, or if a new capability is available, ILevelExtension.invalidateCapabilities(BlockPos) MUST be called to notify the caches. See IBlockCapabilityProvider for details.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isBlockRegistered",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "capability",
          "type": "BlockCapability <?, ?>",
          "annotations": []
        },
        {
          "name": "block",
          "type": "Block",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Return true if a provider is registered for the given block and capability.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "registerEntity",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "capability",
          "type": "EntityCapability <T, C>",
          "annotations": []
        },
        {
          "name": "entityType",
          "type": "EntityType <E>",
          "annotations": []
        },
        {
          "name": "provider",
          "type": "ICapabilityProvider <? super E, C, T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Register a capability provider for some entity type.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isEntityRegistered",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "capability",
          "type": "EntityCapability <?, ?>",
          "annotations": []
        },
        {
          "name": "entityType",
          "type": "EntityType <?>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Return true if a provider is registered for the given entity type and capability.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "registerItem",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "capability",
          "type": "ItemCapability <T, C>",
          "annotations": []
        },
        {
          "name": "provider",
          "type": "ICapabilityProvider < ItemStack , C, T>",
          "annotations": []
        },
        {
          "name": "items",
          "type": "ItemLike ...",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Register a capability provider for some items.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isItemRegistered",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "capability",
          "type": "ItemCapability <?, ?>",
          "annotations": []
        },
        {
          "name": "item",
          "type": "Item",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Return true if a provider is registered for the given item and capability.",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/capabilities/RegisterCapabilitiesEvent.html"
}