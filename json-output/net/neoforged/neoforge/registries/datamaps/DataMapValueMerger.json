{
  "type": "interface",
  "name": "T>",
  "qualified_name": "net.neoforged.neoforge.registries.datamaps.T>",
  "package": "net.neoforged.neoforge.registries.datamaps",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [
    "@FunctionalInterface"
  ],
  "description": "An interface used to merge two conflicting registry data map values attached to the same object. Using a merger you can, for example, merge list data maps that come from different sources, when otherwise the newest entry would win and override the older one.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "merge",
      "modifiers": [],
      "annotations": [],
      "return_type": "T",
      "parameters": [
        {
          "name": "registry",
          "type": "Registry < R >",
          "annotations": []
        },
        {
          "name": "first",
          "type": "com.mojang.datafixers.util.Either< TagKey < R >, ResourceKey < R >>",
          "annotations": []
        },
        {
          "name": "firstValue",
          "type": "T",
          "annotations": []
        },
        {
          "name": "second",
          "type": "com.mojang.datafixers.util.Either< TagKey < R >, ResourceKey < R >>",
          "annotations": []
        },
        {
          "name": "secondValue",
          "type": "T",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Merge two conflicting data map values.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "defaultMerger",
      "modifiers": [
        "static"
      ],
      "annotations": [],
      "return_type": "DataMapValueMerger <R, T>",
      "parameters": [],
      "exceptions": [],
      "description": "Returns a default merger that overrides the old value with the new one.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "listMerger",
      "modifiers": [
        "static"
      ],
      "annotations": [],
      "return_type": "DataMapValueMerger <R, List <T>>",
      "parameters": [],
      "exceptions": [],
      "description": "Returns a default merger that merges list data.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "setMerger",
      "modifiers": [
        "static"
      ],
      "annotations": [],
      "return_type": "DataMapValueMerger <R, Set <T>>",
      "parameters": [],
      "exceptions": [],
      "description": "Returns a default merger that merges set data.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "mapMerger",
      "modifiers": [
        "static"
      ],
      "annotations": [],
      "return_type": "DataMapValueMerger <R, Map <K, V>>",
      "parameters": [],
      "exceptions": [],
      "description": "Returns a default merger that merges map data.",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/registries/datamaps/DataMapValueMerger.html"
}