{
  "type": "class",
  "name": "DataPackRegistryEvent.NewRegistry",
  "qualified_name": "net.neoforged.neoforge.registries.DataPackRegistryEvent.NewRegistry",
  "package": "net.neoforged.neoforge.registries",
  "modifiers": [
    "public",
    "static",
    "final",
    "class"
  ],
  "annotations": [],
  "description": "Fired when datapack registries can be registered. Datapack registries are registries which can only load entries through JSON files from datapacks. Data JSONs will be loaded from data/<datapack_namespace>/modid/registryname/ , where modid is the namespace of the registry key. This event is not cancellable, and does not invalid reference have a result . This event is fired on the mod-specific event bus, on both logical sides.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object",
      "net.neoforged.neoforge.registries.DataPackRegistryEvent"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "registryDataList",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [],
      "type": "List < DataPackRegistryEvent.DataPackRegistryData <?>>",
      "value": null,
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "NewRegistry",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@Internal"
      ],
      "parameters": [],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "dataPackRegistry",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "registryKey",
          "type": "ResourceKey < Registry <T>>",
          "annotations": []
        },
        {
          "name": "codec",
          "type": "com.mojang.serialization.Codec<T>",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Registers the given registry key as an unsynced datapack registry, which will cause data to be loaded from a datapack folder based on the registry's name. The datapack registry is not required to be present on clients when connecting to servers with the mod/registry. Data JSONs will be loaded from data/<datapack_namespace>/modid/registryname/ , where modid is the namespace of the registry key.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "dataPackRegistry",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "registryKey",
          "type": "ResourceKey < Registry <T>>",
          "annotations": []
        },
        {
          "name": "codec",
          "type": "com.mojang.serialization.Codec<T>",
          "annotations": []
        },
        {
          "name": "networkCodec",
          "type": "com.mojang.serialization.Codec<T>",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "Registers the registry key as a datapack registry, which will cause data to be loaded from a datapack folder based on the registry's name. Data JSONs will be loaded from data/<datapack_namespace>/modid/registryname/ , where modid is the namespace of the registry key.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "process",
      "modifiers": [],
      "annotations": [],
      "return_type": "void",
      "parameters": [],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/registries/DataPackRegistryEvent.NewRegistry.html"
}