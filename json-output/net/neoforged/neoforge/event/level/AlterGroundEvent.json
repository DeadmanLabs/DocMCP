{
  "type": "class",
  "name": "AlterGroundEvent",
  "qualified_name": "net.neoforged.neoforge.event.level.AlterGroundEvent",
  "package": "net.neoforged.neoforge.event.level",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "This event is fired when AlterGroundDecorator.placeBlockAt(TreeDecorator.Context, BlockPos) attempts to alter a ground block when generating a feature. An example of this would be large spruce trees converting grass blocks into podzol. This event is not invalid reference cancellable . This event is fired on the main Forge event bus only on the logical server. This event is fired on worker threads, meaning it is unsafe to access external global state. Doing so may induce ConcurrentModificationException or deadlocks.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [
    "AlterGroundEvent.StateProvider"
  ],
  "fields": [
    {
      "name": "ctx",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [],
      "type": "TreeDecorator.Context",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "positions",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [],
      "type": "List < BlockPos >",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "provider",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "type": "AlterGroundEvent.StateProvider",
      "value": null,
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "AlterGroundEvent",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@Internal"
      ],
      "parameters": [
        {
          "name": "ctx",
          "type": "TreeDecorator.Context",
          "annotations": []
        },
        {
          "name": "positions",
          "type": "List < BlockPos >",
          "annotations": []
        },
        {
          "name": "provider",
          "type": "AlterGroundEvent.StateProvider",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "getContext",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "TreeDecorator.Context",
      "parameters": [],
      "exceptions": [],
      "description": "Gets the tree decoration context for the current alteration.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getPositions",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "List < BlockPos >",
      "parameters": [],
      "exceptions": [],
      "description": "The list of positions that are considered roots is different depending on if the context has roots, logs, or both. If roots are not present, this list is equivalent to the logs . If there are roots, and the roots have the same y-level as the lowest log, both this list is the union of both lists. Otherwise, this list is equal to only the roots. In either case, only positions which match the y-level of the zeroth element will be used during placement. This list is immutable.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getStateProvider",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "AlterGroundEvent.StateProvider",
      "parameters": [],
      "exceptions": [],
      "description": "Gets the current BlockStateProvider that will be used by the AlterGroundDecorator .",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "setStateProvider",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "provider",
          "type": "AlterGroundEvent.StateProvider",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Sets the BlockStateProvider that will be used by the AlterGroundDecorator . Because this may be modified by multiple mods, it is advisable to wrap the current provider . An example of wrapping the current provider is shown below: StateProvider old = event.getStateProvider(); event.setStateProvider((rand, pos) -> { BlockState state = old.getState(rand, pos); return state.is(Blocks.PODZOL) ? Blocks.REDSTONE_BLOCK.defaultBlockState() : state; });",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/event/level/AlterGroundEvent.html"
}