{
  "type": "class",
  "name": "FinalizeSpawnEvent",
  "qualified_name": "net.neoforged.neoforge.event.entity.living.FinalizeSpawnEvent",
  "package": "net.neoforged.neoforge.event.entity.living",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "This event is fired before Mob.finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor, net.minecraft.world.DifficultyInstance, net.minecraft.world.entity.MobSpawnType, net.minecraft.world.entity.SpawnGroupData) is called. This allows mods to control mob initialization. In vanilla code, this event is injected by a transformer and not via patch, so calls cannot be traced via call hierarchy (it is not source-visible). Canceling this event will result in Mob.finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor, net.minecraft.world.DifficultyInstance, net.minecraft.world.entity.MobSpawnType, net.minecraft.world.entity.SpawnGroupData) not being called, and the returned value always being null, instead of propagating the SpawnGroupData. The entity will still be spawned. If you want to prevent the spawn, use setSpawnCancelled(boolean) , which will cause Forge to prevent the spawn. This event is fired on NeoForge.EVENT_BUS , and is only fired on the logical server.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object",
      "net.neoforged.neoforge.event.entity.EntityEvent",
      "net.neoforged.neoforge.event.entity.living.MobSpawnEvent"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "spawnType",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [],
      "type": "MobSpawnType",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "spawner",
      "modifiers": [
        "private",
        "final"
      ],
      "annotations": [
        "@Nullable"
      ],
      "type": "@Nullable com.mojang.datafixers.util.Either< BlockEntity , Entity >",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "difficulty",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "type": "DifficultyInstance",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "spawnData",
      "modifiers": [
        "private"
      ],
      "annotations": [
        "@Nullable"
      ],
      "type": "@Nullable SpawnGroupData",
      "value": null,
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "FinalizeSpawnEvent",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@Internal"
      ],
      "parameters": [
        {
          "name": "entity",
          "type": "Mob",
          "annotations": []
        },
        {
          "name": "level",
          "type": "ServerLevelAccessor",
          "annotations": []
        },
        {
          "name": "x",
          "type": "double",
          "annotations": []
        },
        {
          "name": "y",
          "type": "double",
          "annotations": []
        },
        {
          "name": "z",
          "type": "double",
          "annotations": []
        },
        {
          "name": "difficulty",
          "type": "DifficultyInstance",
          "annotations": []
        },
        {
          "name": "spawnType",
          "type": "MobSpawnType",
          "annotations": []
        },
        {
          "name": "spawnData",
          "type": "SpawnGroupData",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        },
        {
          "name": "spawner",
          "type": "com.mojang.datafixers.util.Either< BlockEntity , Entity >",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "getDifficulty",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "DifficultyInstance",
      "parameters": [],
      "exceptions": [],
      "description": "Retrieves the DifficultyInstance for the chunk where the mob is about to be spawned.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "setDifficulty",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "inst",
          "type": "DifficultyInstance",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Sets the difficulty instance for this event, which will be propagated to Mob.finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor, net.minecraft.world.DifficultyInstance, net.minecraft.world.entity.MobSpawnType, net.minecraft.world.entity.SpawnGroupData) unless cancelled. The difficulty instance controls how likely certain random effects are to occur, or if certain mob abilities are enabled.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getSpawnType",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "MobSpawnType",
      "parameters": [],
      "exceptions": [],
      "description": "Retrieves the type of mob spawn that happened (the event that caused the spawn). The enum names are self-explanatory.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getSpawnData",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable SpawnGroupData",
      "parameters": [],
      "exceptions": [],
      "description": "Retrieves the SpawnGroupData for this entity. When spawning mobs in a loop, this group data is used for the entire group and impacts future spawns. This is how entities like horses ensure that the whole group spawns as a single variant. How this is used varies on a per-entity basis.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "setSpawnData",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "data",
          "type": "SpawnGroupData",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "Sets the spawn data for this entity. If this event is cancelled, this value is not used, since Mob.finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor, net.minecraft.world.DifficultyInstance, net.minecraft.world.entity.MobSpawnType, net.minecraft.world.entity.SpawnGroupData) will not be called.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getSpawner",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@Nullable"
      ],
      "return_type": "@Nullable com.mojang.datafixers.util.Either< BlockEntity , Entity >",
      "parameters": [],
      "exceptions": [],
      "description": "Retrieves the underlying BlockEntity or Entity that performed the spawn. This may be a SpawnerBlockEntity , TrialSpawnerBlockEntity , MinecartSpawner , or similar modded object. This is usually null unless the spawn type is a spawner type , and may still be null even then.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "setSpawnCancelled",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "cancel",
          "type": "boolean",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "This method can be used to cancel the spawn of this mob. This method must be used if you want to block the spawn, as canceling the event only blocks the call to Mob.finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor, net.minecraft.world.DifficultyInstance, net.minecraft.world.entity.MobSpawnType, net.minecraft.world.entity.SpawnGroupData) . Note that if the spawn is cancelled, but the event is not, then Mob.finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor, net.minecraft.world.DifficultyInstance, net.minecraft.world.entity.MobSpawnType, net.minecraft.world.entity.SpawnGroupData) will still be called, but the entity will not be spawned. Usually that has no side effects, but callers should be aware.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "isSpawnCancelled",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "boolean",
      "parameters": [],
      "exceptions": [],
      "description": "Returns the current spawn cancellation status, which can be changed via setSpawnCancelled(boolean) .",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/event/entity/living/FinalizeSpawnEvent.html"
}