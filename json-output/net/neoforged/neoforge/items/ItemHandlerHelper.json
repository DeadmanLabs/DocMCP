{
  "type": "class",
  "name": "ItemHandlerHelper",
  "qualified_name": "net.neoforged.neoforge.items.ItemHandlerHelper",
  "package": "net.neoforged.neoforge.items",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [
    {
      "name": "ItemHandlerHelper",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "parameters": [],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "insertItem",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "dest",
          "type": "IItemHandler",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "simulate",
          "type": "boolean",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "insertItemStacked",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "inventory",
          "type": "IItemHandler",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "simulate",
          "type": "boolean",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Inserts the ItemStack into the inventory, filling up already present stacks first. This is equivalent to the behaviour of a player picking up an item. Note: This function stacks items without subtypes with different metadata together.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "giveItemToPlayer",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "giveItemToPlayer without preferred slot",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "giveItemToPlayer",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "preferredSlot",
          "type": "int",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "Inserts the given itemstack into the players inventory. If the inventory can't hold it, the item will be dropped in the world at the players position.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "calcRedstoneFromInventory",
      "modifiers": [
        "public",
        "static"
      ],
      "annotations": [],
      "return_type": "int",
      "parameters": [
        {
          "name": "inv",
          "type": "IItemHandler",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "This method uses the standard vanilla algorithm to calculate a comparator output for how \"full\" the inventory is. This method is an adaptation of Container#calcRedstoneFromInventory(IInventory).",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/items/ItemHandlerHelper.html"
}