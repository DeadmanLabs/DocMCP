{
  "type": "class",
  "name": "ContextAwareReloadListener",
  "qualified_name": "net.neoforged.neoforge.resource.ContextAwareReloadListener",
  "package": "net.neoforged.neoforge.resource",
  "modifiers": [
    "public",
    "abstract",
    "class"
  ],
  "annotations": [],
  "description": "Reload listeners that descend from this class will have the reload context automatically populated when it is available. The context is guaranteed to be available for the duration of PreparableReloadListener.reload(net.minecraft.server.packs.resources.PreparableReloadListener.PreparationBarrier, net.minecraft.server.packs.resources.ResourceManager, net.minecraft.util.profiling.ProfilerFiller, net.minecraft.util.profiling.ProfilerFiller, java.util.concurrent.Executor, java.util.concurrent.Executor) . For children of SimplePreparableReloadListener , it will be available during both SimplePreparableReloadListener.prepare(net.minecraft.server.packs.resources.ResourceManager, net.minecraft.util.profiling.ProfilerFiller) prepare()} and apply() .",
  "inheritance": {
    "extends": null,
    "implements": [
      "PreparableReloadListener"
    ],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "conditionContext",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "type": "ICondition.IContext",
      "value": null,
      "description": "",
      "deprecated": false
    },
    {
      "name": "registryLookup",
      "modifiers": [
        "private"
      ],
      "annotations": [],
      "type": "HolderLookup.Provider",
      "value": null,
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "ContextAwareReloadListener",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "parameters": [],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "injectContext",
      "modifiers": [
        "public"
      ],
      "annotations": [
        "@Internal"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "context",
          "type": "ICondition.IContext",
          "annotations": []
        },
        {
          "name": "registryLookup",
          "type": "HolderLookup.Provider",
          "annotations": []
        }
      ],
      "exceptions": [],
      "description": "",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getContext",
      "modifiers": [
        "protected",
        "final"
      ],
      "annotations": [],
      "return_type": "ICondition.IContext",
      "parameters": [],
      "exceptions": [],
      "description": "Returns the condition context held by this listener, or ICondition.IContext.EMPTY if it is unavailable.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "getRegistryLookup",
      "modifiers": [
        "protected",
        "final"
      ],
      "annotations": [],
      "return_type": "HolderLookup.Provider",
      "parameters": [],
      "exceptions": [],
      "description": "Returns the registry access held by this listener, or RegistryAccess.EMPTY if it is unavailable.",
      "overrides": null,
      "since": null,
      "deprecated": false
    },
    {
      "name": "makeConditionalOps",
      "modifiers": [
        "protected",
        "final"
      ],
      "annotations": [],
      "return_type": "ConditionalOps <com.google.gson.JsonElement>",
      "parameters": [],
      "exceptions": [],
      "description": "Creates a new ConditionalOps using getContext() and getRegistryLookup() ()}.",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/resource/ContextAwareReloadListener.html"
}