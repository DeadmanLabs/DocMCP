{
  "type": "class",
  "name": "RegisterCauldronFluidContentEvent",
  "qualified_name": "net.neoforged.neoforge.fluids.RegisterCauldronFluidContentEvent",
  "package": "net.neoforged.neoforge.fluids",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "Event to register CauldronFluidContent for modded cauldrons. Registering cauldrons is done by calling CauldronFluidContent.register(net.minecraft.world.level.block.Block, net.minecraft.world.level.material.Fluid, int, net.minecraft.world.level.block.state.properties.IntegerProperty) and allows all cauldrons registered in this way to interoperate with each other when accessed via the Capabilities.FluidHandler.BLOCK capability.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [
    {
      "name": "RegisterCauldronFluidContentEvent",
      "modifiers": [],
      "annotations": [],
      "parameters": [],
      "exceptions": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "register",
      "modifiers": [
        "public"
      ],
      "annotations": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "block",
          "type": "Block",
          "annotations": []
        },
        {
          "name": "fluid",
          "type": "Fluid",
          "annotations": []
        },
        {
          "name": "totalAmount",
          "type": "int",
          "annotations": []
        },
        {
          "name": "levelProperty",
          "type": "IntegerProperty",
          "annotations": [
            "@Nullable",
            "@Nullable"
          ]
        }
      ],
      "exceptions": [],
      "description": "Register a new cauldron, allowing it to be filled and emptied through the standard capability. In both cases, return the content of the cauldron, either the existing one, or the newly registered one. If the block is not a subclass of AbstractCauldronBlock , BlockBehaviour.onPlace(BlockState, Level, BlockPos, BlockState, boolean) and BlockBehaviour.onRemove(BlockState, Level, BlockPos, BlockState, boolean) must be overridden to invalidate capabilities when the block changes! See how NeoForge patches AbstractCauldronBlock for reference.",
      "overrides": null,
      "since": null,
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "1.21.x-neoforge/net/neoforged/neoforge/fluids/RegisterCauldronFluidContentEvent.html"
}