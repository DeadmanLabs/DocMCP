{
  "type": "interface",
  "name": "DistExecutor.SafeReferent",
  "qualified_name": "DistExecutor.SafeReferent",
  "package": "",
  "modifiers": [],
  "annotations": [],
  "description": "A safe referent. This will assert that it is being called via a separated class method reference. This will avoid the common pitfalls of DistExecutor.callWhenOn(Dist, Supplier) above. SafeReferents assert that they are defined as a separate method outside the scope of the calling class. Implementations need to be defined in a separate class to the referring site, with appropriate visibility to be accessible at the callsite (generally, avoid private methods). Valid: DistExecutor.safeCallWhenOn(Dist.CLIENT, ()->AnotherClass::clientOnlyMethod); Invalid: DistExecutor.safeCallWhenOn(Dist.CLIENT, ()->()->Minecraft.getInstance().world);",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.15.2/net/minecraftforge/fml/DistExecutor.SafeReferent.html"
}