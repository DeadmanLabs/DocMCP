{
  "type": "class",
  "name": "FluidStack",
  "qualified_name": "net.minecraftforge.fluids.FluidStack",
  "package": "net.minecraftforge.fluids",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "ItemStack substitute for Fluids. NOTE: Equality is based on the Fluid, not the amount. Use isFluidStackIdentical(FluidStack) to determine if FluidID, Amount and NBT Tag are all equal.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "LOGGER",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": "org.apache.logging.log4j.Logger",
      "description": "",
      "deprecated": false
    },
    {
      "name": "EMPTY",
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "type": "FluidStack",
      "description": "",
      "deprecated": false
    },
    {
      "name": "CODEC",
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "type": "com.mojang.serialization.Codec< FluidStack >",
      "description": "",
      "deprecated": false
    },
    {
      "name": "isEmpty",
      "modifiers": [
        "private"
      ],
      "type": "boolean",
      "description": "",
      "deprecated": false
    },
    {
      "name": "amount",
      "modifiers": [
        "private"
      ],
      "type": "int",
      "description": "",
      "deprecated": false
    },
    {
      "name": "tag",
      "modifiers": [
        "private"
      ],
      "type": "CompoundTag",
      "description": "",
      "deprecated": false
    },
    {
      "name": "fluidDelegate",
      "modifiers": [
        "private"
      ],
      "type": "IRegistryDelegate < Fluid >",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "FluidStack",
      "modifiers": [
        "public"
      ],
      "parameters": [
        {
          "name": "fluid",
          "type": "Fluid",
          "annotations": []
        },
        {
          "name": "amount",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "FluidStack",
      "modifiers": [
        "public"
      ],
      "parameters": [
        {
          "name": "fluid",
          "type": "Fluid",
          "annotations": []
        },
        {
          "name": "amount",
          "type": "int",
          "annotations": []
        },
        {
          "name": "nbt",
          "type": "CompoundTag",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "FluidStack",
      "modifiers": [
        "public"
      ],
      "parameters": [
        {
          "name": "stack",
          "type": "FluidStack",
          "annotations": []
        },
        {
          "name": "amount",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "loadFluidStackFromNBT",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "FluidStack",
      "parameters": [
        {
          "name": "nbt",
          "type": "CompoundTag",
          "annotations": []
        }
      ],
      "description": "This provides a safe method for retrieving a FluidStack - if the Fluid is invalid, the stack will return as null.",
      "deprecated": false
    },
    {
      "name": "writeToNBT",
      "modifiers": [
        "public"
      ],
      "return_type": "CompoundTag",
      "parameters": [
        {
          "name": "nbt",
          "type": "CompoundTag",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "writeToPacket",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "buf",
          "type": "FriendlyByteBuf",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "readFromPacket",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "FluidStack",
      "parameters": [
        {
          "name": "buf",
          "type": "FriendlyByteBuf",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getFluid",
      "modifiers": [
        "public",
        "final"
      ],
      "return_type": "Fluid",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getRawFluid",
      "modifiers": [
        "public",
        "final"
      ],
      "return_type": "Fluid",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "isEmpty",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "updateEmpty",
      "modifiers": [
        "protected"
      ],
      "return_type": "void",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getAmount",
      "modifiers": [
        "public"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "setAmount",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "amount",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "grow",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "amount",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "shrink",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "amount",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "hasTag",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getTag",
      "modifiers": [
        "public"
      ],
      "return_type": "CompoundTag",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "setTag",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "tag",
          "type": "CompoundTag",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getOrCreateTag",
      "modifiers": [
        "public"
      ],
      "return_type": "CompoundTag",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getChildTag",
      "modifiers": [
        "public"
      ],
      "return_type": "CompoundTag",
      "parameters": [
        {
          "name": "childName",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getOrCreateChildTag",
      "modifiers": [
        "public"
      ],
      "return_type": "CompoundTag",
      "parameters": [
        {
          "name": "childName",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "removeChildTag",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "childName",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getDisplayName",
      "modifiers": [
        "public"
      ],
      "return_type": "Component",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getTranslationKey",
      "modifiers": [
        "public"
      ],
      "return_type": "String",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "copy",
      "modifiers": [
        "public"
      ],
      "return_type": "FluidStack",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "isFluidEqual",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "other",
          "type": "FluidStack",
          "annotations": [
            "Nonnull"
          ]
        }
      ],
      "description": "Determines if the FluidIDs and NBT Tags are equal. This does not check amounts.",
      "deprecated": false
    },
    {
      "name": "isFluidStackTagEqual",
      "modifiers": [
        "private"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "other",
          "type": "FluidStack",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "areFluidStackTagsEqual",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "stack1",
          "type": "FluidStack",
          "annotations": [
            "Nonnull"
          ]
        },
        {
          "name": "stack2",
          "type": "FluidStack",
          "annotations": [
            "Nonnull"
          ]
        }
      ],
      "description": "Determines if the NBT Tags are equal. Useful if the FluidIDs are known to be equal.",
      "deprecated": false
    },
    {
      "name": "containsFluid",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "other",
          "type": "FluidStack",
          "annotations": [
            "Nonnull"
          ]
        }
      ],
      "description": "Determines if the Fluids are equal and this stack is larger.",
      "deprecated": false
    },
    {
      "name": "isFluidStackIdentical",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "other",
          "type": "FluidStack",
          "annotations": []
        }
      ],
      "description": "Determines if the FluidIDs, Amounts, and NBT Tags are all equal.",
      "deprecated": false
    },
    {
      "name": "isFluidEqual",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "other",
          "type": "ItemStack",
          "annotations": [
            "Nonnull"
          ]
        }
      ],
      "description": "Determines if the FluidIDs and NBT Tags are equal compared to a registered container ItemStack. This does not check amounts.",
      "deprecated": false
    },
    {
      "name": "hashCode",
      "modifiers": [
        "public",
        "final"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "equals",
      "modifiers": [
        "public",
        "final"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "o",
          "type": "Object",
          "annotations": []
        }
      ],
      "description": "Default equality comparison for a FluidStack. Same functionality as isFluidEqual(). This is included for use in data structures.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.18.2/net/minecraftforge/fluids/FluidStack.html"
}