{
  "type": "class",
  "name": "ForgeTagHandler",
  "qualified_name": "net.minecraftforge.common.ForgeTagHandler",
  "package": "net.minecraftforge.common",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "LOGGER",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": "org.apache.logging.log4j.Logger",
      "description": "",
      "deprecated": false
    },
    {
      "name": "customTagTypes",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "Map < ResourceLocation , ITagCollection <?>>",
      "description": "",
      "deprecated": false
    },
    {
      "name": "customTagTypeNames",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "Set < ResourceLocation >",
      "description": "",
      "deprecated": false
    },
    {
      "name": "tagTypesSet",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "boolean",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "ForgeTagHandler",
      "modifiers": [
        "public"
      ],
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "getTagRegistry",
      "modifiers": [
        "private",
        "static"
      ],
      "return_type": "TagRegistry <T>",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "validateRegistrySupportsTags",
      "modifiers": [
        "private",
        "static"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <?>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "makeWrapperTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "ITag.INamedTag <T>",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "Helper method that creates a named tag for a forge registry, erroring if the registry doesn't support custom tag types. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "createOptionalTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tags.IOptionalNamedTag <T>",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "Helper method that creates an optional tag for a forge registry, erroring if the registry doesn't support custom tag types. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "createOptionalTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tags.IOptionalNamedTag <T>",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "defaults",
          "type": "Set < Supplier <T>>",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Helper method that creates an optional tag for a forge registry, erroring if the registry doesn't support custom tag types. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "makeWrapperTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "ITag.INamedTag <T>",
      "parameters": [
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "Helper method for creating named tags for custom forge registries. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "createOptionalTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tags.IOptionalNamedTag <T>",
      "parameters": [
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "Helper method for creating optional tags for custom forge registries. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "createOptionalTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tags.IOptionalNamedTag <T>",
      "parameters": [
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "defaults",
          "type": "Set < Supplier <T>>",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Helper method for creating optional tags for custom forge registries. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "getCustomTagTypeNames",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Set < ResourceLocation >",
      "parameters": [],
      "description": "Gets the all the registry names of registries that support custom tag types.",
      "deprecated": false
    },
    {
      "name": "getCustomTagTypes",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Map < ResourceLocation , ITagCollection <?>>",
      "parameters": [],
      "description": "Gets a map of registry name to tag collection for all custom tag types.",
      "deprecated": false
    },
    {
      "name": "setCustomTagTypes",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "customTagTypes",
          "type": "Set < ResourceLocation >",
          "annotations": []
        }
      ],
      "description": "Sets the set containing the resource locations representing the registry name of each forge registry that supports custom tag types.",
      "deprecated": false
    },
    {
      "name": "createCustomTagTypeReaders",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Map < ResourceLocation , TagCollectionReader <?>>",
      "parameters": [],
      "description": "Creates a map for custom tag type to tag reader",
      "deprecated": false
    },
    {
      "name": "resetCachedTagCollections",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "makeEmpty",
          "type": "boolean",
          "annotations": []
        },
        {
          "name": "withOptional",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "Resets the cached collections for the various custom tag types.",
      "deprecated": false
    },
    {
      "name": "populateTagCollectionManager",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "ITagCollectionSupplier",
      "parameters": [
        {
          "name": "blockTags",
          "type": "ITagCollection < Block >",
          "annotations": []
        },
        {
          "name": "itemTags",
          "type": "ITagCollection < Item >",
          "annotations": []
        },
        {
          "name": "fluidTags",
          "type": "ITagCollection < Fluid >",
          "annotations": []
        },
        {
          "name": "entityTypeTags",
          "type": "ITagCollection < EntityType <?>>",
          "annotations": []
        }
      ],
      "description": "Used to ensure that all custom tag types have a defaulted collection when vanilla is initializing a defaulted TagCollectionManager",
      "deprecated": false
    },
    {
      "name": "updateCustomTagTypes",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "tagCollectionReaders",
          "type": "List < ForgeTagHandler.TagCollectionReaderInfo >",
          "annotations": []
        }
      ],
      "description": "Updates the custom tag types' tags from reloading via NetworkTagManager",
      "deprecated": false
    },
    {
      "name": "updateCustomTagTypes",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "packet",
          "type": "FMLPlayMessages.SyncCustomTagTypes",
          "annotations": []
        }
      ],
      "description": "Updates the custom tag types' tags from packet",
      "deprecated": false
    },
    {
      "name": "getCustomTagTypeReloadResults",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "CompletableFuture < List < ForgeTagHandler.TagCollectionReaderInfo >>",
      "parameters": [
        {
          "name": "resourceManager",
          "type": "IResourceManager",
          "annotations": []
        },
        {
          "name": "backgroundExecutor",
          "type": "Executor",
          "annotations": []
        },
        {
          "name": "readers",
          "type": "Map < ResourceLocation , TagCollectionReader <?>>",
          "annotations": []
        }
      ],
      "description": "Gets the completable future containing the reload results for all custom tag types.",
      "deprecated": false
    },
    {
      "name": "reinjectOptionalTagsCustomTypes",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "void",
      "parameters": [],
      "description": "Add all the missing optional tags back into the custom tag types tag collections",
      "deprecated": false
    },
    {
      "name": "withNoCustom",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "ITagCollectionSupplier",
      "parameters": [
        {
          "name": "tagCollectionSupplier",
          "type": "ITagCollectionSupplier",
          "annotations": []
        }
      ],
      "description": "Gets an ITagCollectionSupplier with empty custom tag type collections to allow for checking if the client is requiring any tags of custom tag types.",
      "deprecated": false
    },
    {
      "name": "withSpecificCustom",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "ITagCollectionSupplier",
      "parameters": [
        {
          "name": "tagCollectionSupplier",
          "type": "ITagCollectionSupplier",
          "annotations": []
        },
        {
          "name": "customTagTypes",
          "type": "Map < ResourceLocation , ITagCollection <?>>",
          "annotations": []
        }
      ],
      "description": "Gets an ITagCollectionSupplier with specific custom tag types for testing if any tags are missing.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.16.5/net/minecraftforge/common/ForgeTagHandler.html"
}