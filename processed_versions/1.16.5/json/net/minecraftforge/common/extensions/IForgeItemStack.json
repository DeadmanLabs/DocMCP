{
  "type": "interface",
  "name": "IForgeItemStack",
  "qualified_name": "net.minecraftforge.common.extensions.IForgeItemStack",
  "package": "net.minecraftforge.common.extensions",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "getStack",
      "modifiers": [
        "default"
      ],
      "return_type": "ItemStack",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getContainerItem",
      "modifiers": [
        "default"
      ],
      "return_type": "ItemStack",
      "parameters": [],
      "description": "ItemStack sensitive version of getContainerItem. Returns a full ItemStack instance of the result.",
      "deprecated": false
    },
    {
      "name": "hasContainerItem",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "ItemStack sensitive version of hasContainerItem",
      "deprecated": false
    },
    {
      "name": "getBurnTime",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "recipeType",
          "type": "IRecipeType <?>",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getBurnTime",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getHarvestLevel",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "tool",
          "type": "ToolType",
          "annotations": []
        },
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": [
            "Nullable"
          ]
        },
        {
          "name": "state",
          "type": "BlockState",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Queries the harvest level of this item stack for the specified tool class, Returns -1 if this tool is not of the specified type",
      "deprecated": false
    },
    {
      "name": "getToolTypes",
      "modifiers": [
        "default"
      ],
      "return_type": "Set < ToolType >",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "onItemUseFirst",
      "modifiers": [
        "default"
      ],
      "return_type": "ActionResultType",
      "parameters": [
        {
          "name": "context",
          "type": "ItemUseContext",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "serializeNBT",
      "modifiers": [
        "default"
      ],
      "return_type": "CompoundNBT",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "onBlockStartBreak",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        }
      ],
      "description": "Called before a block is broken. Return true to prevent default block harvesting. Note: In SMP, this is called on both client and server sides!",
      "deprecated": false
    },
    {
      "name": "shouldCauseBlockBreakReset",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "newStack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "description": "Called when the player is mining a block and the item in his hand changes. Allows to not reset blockbreaking if only NBT or similar changes.",
      "deprecated": false
    },
    {
      "name": "canApplyAtEnchantingTable",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "enchantment",
          "type": "Enchantment",
          "annotations": []
        }
      ],
      "description": "Checks whether an item can be enchanted with a certain enchantment. This applies specifically to enchanting an item in the enchanting table and is called when retrieving the list of possible enchantments for an item. Enchantments may additionally (or exclusively) be doing their own checks in Enchantment.canApplyAtEnchantingTable(ItemStack) ; check the individual implementation for reference. By default this will check if the enchantment type is valid for this item type.",
      "deprecated": false
    },
    {
      "name": "getItemEnchantability",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "ItemStack sensitive version of getItemEnchantability",
      "deprecated": false
    },
    {
      "name": "getEquipmentSlot",
      "modifiers": [
        "default"
      ],
      "return_type": "EquipmentSlotType",
      "parameters": [],
      "description": "Override this to set a non-default armor slot for an ItemStack, but do not use this to get the armor slot of said stack; for that, use net.minecraft.entity.LivingEntity#getSlotForItemStack(ItemStack) .",
      "deprecated": false
    },
    {
      "name": "canDisableShield",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "shield",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "attacker",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "description": "Can this Item disable a shield",
      "deprecated": false
    },
    {
      "name": "isShield",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Is this Item a shield",
      "deprecated": false
    },
    {
      "name": "onEntitySwing",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "description": "Called when a entity tries to play the 'swing' animation.",
      "deprecated": false
    },
    {
      "name": "onUsingTick",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "player",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "count",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Called each tick while using an item.",
      "deprecated": false
    },
    {
      "name": "getEntityLifespan",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        }
      ],
      "description": "Retrieves the normal 'lifespan' of this item when it is dropped on the ground as a EntityItem. This is in ticks, standard result is 6000, or 5 mins.",
      "deprecated": false
    },
    {
      "name": "onEntityItemUpdate",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "ItemEntity",
          "annotations": []
        }
      ],
      "description": "Called by the default implemetation of EntityItem's onUpdate method, allowing for cleaner control over the update of the item without having to write a subclass.",
      "deprecated": false
    },
    {
      "name": "getXpRepairRatio",
      "modifiers": [
        "default"
      ],
      "return_type": "float",
      "parameters": [],
      "description": "Determines the amount of durability the mending enchantment will repair, on average, per point of experience.",
      "deprecated": false
    },
    {
      "name": "onArmorTick",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        }
      ],
      "description": "Called to tick armor in the armor slot. Override to do something",
      "deprecated": false
    },
    {
      "name": "onHorseArmorTick",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "horse",
          "type": "MobEntity",
          "annotations": []
        }
      ],
      "description": "Called every tick from HorseEntity#onUpdate() on the item in the armor slot.",
      "deprecated": false
    },
    {
      "name": "canEquip",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "armorType",
          "type": "EquipmentSlotType",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "Entity",
          "annotations": []
        }
      ],
      "description": "Determines if the specific ItemStack can be placed in the specified armor slot, for the entity.",
      "deprecated": false
    },
    {
      "name": "isBookEnchantable",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "book",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "description": "Allow or forbid the specific book/item combination as an anvil enchant",
      "deprecated": false
    },
    {
      "name": "onDroppedByPlayer",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        }
      ],
      "description": "Called when a player drops the item into the world, returning false from this will prevent the item from being removed from the players inventory and spawning in the world",
      "deprecated": false
    },
    {
      "name": "getHighlightTip",
      "modifiers": [
        "default"
      ],
      "return_type": "ITextComponent",
      "parameters": [
        {
          "name": "displayName",
          "type": "ITextComponent",
          "annotations": []
        }
      ],
      "description": "Allow the item one last chance to modify its name used for the tool highlight useful for adding something extra that can't be removed by a user in the displayed name, such as a mode of operation.",
      "deprecated": false
    },
    {
      "name": "getShareTag",
      "modifiers": [
        "default"
      ],
      "return_type": "CompoundNBT",
      "parameters": [],
      "description": "Get the NBT data to be sent to the client. The Item can control what data is kept in the tag. Note that this will sometimes be applied multiple times, the following MUST be supported: Item item = stack.getItem(); NBTTagCompound nbtShare1 = item.getNBTShareTag(stack); stack.setTagCompound(nbtShare1); NBTTagCompound nbtShare2 = item.getNBTShareTag(stack); assert nbtShare1.equals(nbtShare2);",
      "deprecated": false
    },
    {
      "name": "readShareTag",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "nbt",
          "type": "CompoundNBT",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Override this method to decide what to do with the NBT data received from getNBTShareTag().",
      "deprecated": false
    },
    {
      "name": "doesSneakBypassUse",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        }
      ],
      "description": "Should this item, when held, allow sneak-clicks to pass through to the underlying block?",
      "deprecated": false
    },
    {
      "name": "areShareTagsEqual",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "other",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "description": "Modeled after ItemStack.areItemStackTagsEqual Uses Item.getNBTShareTag for comparison instead of NBT and capabilities. Only used for comparing itemStacks that were transferred from server to client using Item.getNBTShareTag.",
      "deprecated": false
    },
    {
      "name": "equals",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "other",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "limitTags",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "Determines if the ItemStack is equal to the other item stack, including Item, Count, and NBT.",
      "deprecated": false
    },
    {
      "name": "isRepairable",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "Determines if a item is reparable, used by Repair recipes and Grindstone.",
      "deprecated": false
    },
    {
      "name": "isPiglinCurrency",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "Called by Piglins when checking to see if they will give an item or something in exchange for this item.",
      "deprecated": false
    },
    {
      "name": "makesPiglinsNeutral",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "wearer",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "description": "Called by Piglins to check if a given item prevents hostility on sight. If this is true the Piglins will be neutral to the entity wearing this item, and will not attack on sight. Note: This does not prevent Piglins from becoming hostile due to other actions, nor does it make Piglins that are already hostile stop being so.",
      "deprecated": false
    },
    {
      "name": "isEnderMask",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        },
        {
          "name": "endermanEntity",
          "type": "EndermanEntity",
          "annotations": []
        }
      ],
      "description": "Whether this Item can be used to hide player head for enderman.",
      "deprecated": false
    },
    {
      "name": "canElytraFly",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "description": "Used to determine if the player can use Elytra flight. This is called Client and Server side.",
      "deprecated": false
    },
    {
      "name": "elytraFlightTick",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "flightTicks",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Used to determine if the player can continue Elytra flight, this is called each tick, and can be used to apply ItemStack damage, consume Energy, or what have you. For example the Vanilla implementation of this, applies damage to the ItemStack every 20 ticks.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.16.5/net/minecraftforge/common/extensions/IForgeItemStack.html"
}