{
  "type": "interface",
  "name": "IForgeEntity",
  "qualified_name": "net.minecraftforge.common.extensions.IForgeEntity",
  "package": "net.minecraftforge.common.extensions",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "getEntity",
      "modifiers": [
        "default"
      ],
      "return_type": "Entity",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "deserializeNBT",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "nbt",
          "type": "CompoundNBT",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "serializeNBT",
      "modifiers": [
        "default"
      ],
      "return_type": "CompoundNBT",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "canUpdate",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "canUpdate",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "value",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "captureDrops",
      "modifiers": [],
      "return_type": "Collection < ItemEntity >",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "captureDrops",
      "modifiers": [],
      "return_type": "Collection < ItemEntity >",
      "parameters": [
        {
          "name": "captureDrops",
          "type": "Collection < ItemEntity >",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getPersistentData",
      "modifiers": [],
      "return_type": "CompoundNBT",
      "parameters": [],
      "description": "Returns a NBTTagCompound that can be used to store custom data for this entity. It will be written, and read from disc, so it persists over world saves.",
      "deprecated": false
    },
    {
      "name": "shouldRiderSit",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.",
      "deprecated": false
    },
    {
      "name": "getPickedResult",
      "modifiers": [
        "default"
      ],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "target",
          "type": "RayTraceResult",
          "annotations": []
        }
      ],
      "description": "Called when a user uses the creative pick block button on this entity.",
      "deprecated": false
    },
    {
      "name": "canRiderInteract",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "If a rider of this entity can interact with this entity. Should return true on the ridden entity if so.",
      "deprecated": false
    },
    {
      "name": "canBeRiddenInWater",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "rider",
          "type": "Entity",
          "annotations": []
        }
      ],
      "description": "Checks if this entity can continue to be ridden while it is underwater.",
      "deprecated": false
    },
    {
      "name": "canTrample",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "state",
          "type": "BlockState",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "fallDistance",
          "type": "float",
          "annotations": []
        }
      ],
      "description": "Checks if this Entity can trample a Block .",
      "deprecated": false
    },
    {
      "name": "getClassification",
      "modifiers": [
        "default"
      ],
      "return_type": "EntityClassification",
      "parameters": [
        {
          "name": "forSpawnCount",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "Returns The classification of this entity",
      "deprecated": false
    },
    {
      "name": "isAddedToWorld",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [],
      "description": "Gets whether this entity has been added to a world (for tracking). Specifically between the times when an entity is added to a world and the entity being removed from the world's tracked lists. See World#onEntityAdded(Entity) and World#onEntityRemoved(Entity) .",
      "deprecated": false
    },
    {
      "name": "onAddedToWorld",
      "modifiers": [],
      "return_type": "void",
      "parameters": [],
      "description": "Called after the entity has been added to the world's ticking list. Can be overriden, but needs to call super to prevent MC-136995.",
      "deprecated": false
    },
    {
      "name": "onRemovedFromWorld",
      "modifiers": [],
      "return_type": "void",
      "parameters": [],
      "description": "Called after the entity has been removed to the world's ticking list. Can be overriden, but needs to call super to prevent MC-136995.",
      "deprecated": false
    },
    {
      "name": "revive",
      "modifiers": [],
      "return_type": "void",
      "parameters": [],
      "description": "Revives an entity that has been removed from a world. Used as replacement for entity.removed = true. Having it as a function allows the entity to react to being revived.",
      "deprecated": false
    },
    {
      "name": "isMultipartEntity",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "This is used to specify that your entity has multiple individual parts, such as the Vanilla Ender Dragon. See EnderDragonEntity for an example implementation.",
      "deprecated": false
    },
    {
      "name": "getParts",
      "modifiers": [
        "default"
      ],
      "return_type": "PartEntity <?>[]",
      "parameters": [],
      "description": "Gets the individual sub parts that make up this entity. The entities returned by this method are NOT saved to the world in nay way, they exist as an extension of their host entity. The child entity does not track its server-side(or client-side) counterpart, and the host entity is responsible for moving and managing these children. Only used if isMultipartEntity() returns true. See EnderDragonEntity for an example implementation.",
      "deprecated": false
    },
    {
      "name": "getDimensionsForge",
      "modifiers": [
        "default"
      ],
      "return_type": "EntitySize",
      "parameters": [
        {
          "name": "pose",
          "type": "Pose",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getEyeHeightForge",
      "modifiers": [
        "default"
      ],
      "return_type": "float",
      "parameters": [
        {
          "name": "pose",
          "type": "Pose",
          "annotations": []
        },
        {
          "name": "size",
          "type": "EntitySize",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.16.5/net/minecraftforge/common/extensions/IForgeEntity.html"
}