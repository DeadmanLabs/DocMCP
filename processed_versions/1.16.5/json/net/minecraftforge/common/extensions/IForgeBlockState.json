{
  "type": "interface",
  "name": "IForgeBlockState",
  "qualified_name": "net.minecraftforge.common.extensions.IForgeBlockState",
  "package": "net.minecraftforge.common.extensions",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "getBlockState",
      "modifiers": [
        "default"
      ],
      "return_type": "BlockState",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getSlipperiness",
      "modifiers": [
        "default"
      ],
      "return_type": "float",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "Entity",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Gets the slipperiness at the given location at the given state. Normally between 0 and 1. Note that entities may reduce slipperiness by a certain factor of their own; for LivingEntity , this is .91 . ItemEntity uses .98 , and FishingBobberEntity uses .92 .",
      "deprecated": false
    },
    {
      "name": "getLightValue",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Get a light value for this block, taking into account the given state and coordinates, normal ranges are between 0 and 15",
      "deprecated": false
    },
    {
      "name": "isLadder",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "description": "Checks if a player or entity can use this block to 'climb' like a ladder.",
      "deprecated": false
    },
    {
      "name": "hasTileEntity",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "Called throughout the code as a replacement for block instanceof BlockContainer Moving this to the Block base class allows for mods that wish to extend vanilla blocks, and also want to have a tile entity on that block, may. Return true from this function to specify this block has a tile entity.",
      "deprecated": false
    },
    {
      "name": "createTileEntity",
      "modifiers": [
        "default"
      ],
      "return_type": "TileEntity",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        }
      ],
      "description": "Called throughout the code as a replacement for ITileEntityProvider.createNewTileEntity Return the same thing you would from that function. This will fall back to ITileEntityProvider.createNewTileEntity(World) if this block is a ITileEntityProvider",
      "deprecated": false
    },
    {
      "name": "canHarvestBlock",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        }
      ],
      "description": "Determines if the player can harvest this block, obtaining it's drops when the block is destroyed.",
      "deprecated": false
    },
    {
      "name": "removedByPlayer",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        },
        {
          "name": "willHarvest",
          "type": "boolean",
          "annotations": []
        },
        {
          "name": "fluid",
          "type": "FluidState",
          "annotations": []
        }
      ],
      "description": "Called when a player removes a block. This is responsible for actually destroying the block, and the block is intact at time of call. This is called regardless of whether the player can harvest the block or not. Return true if the block is actually destroyed. Note: When used in multiplayer, this is called on both client and server sides!",
      "deprecated": false
    },
    {
      "name": "isBed",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "sleeper",
          "type": "LivingEntity",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Determines if this block is classified as a Bed, Allowing players to sleep in it, though the block has to specifically perform the sleeping functionality in it's activated event.",
      "deprecated": false
    },
    {
      "name": "canCreatureSpawn",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "type",
          "type": "EntitySpawnPlacementRegistry.PlacementType",
          "annotations": []
        },
        {
          "name": "entityType",
          "type": "EntityType <?>",
          "annotations": []
        }
      ],
      "description": "Determines if a specified mob type can spawn on this block, returning false will prevent any mob from spawning on the block.",
      "deprecated": false
    },
    {
      "name": "getBedSpawnPosition",
      "modifiers": [
        "default"
      ],
      "return_type": "Optional < Vector3d >",
      "parameters": [
        {
          "name": "type",
          "type": "EntityType <?>",
          "annotations": []
        },
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "orientation",
          "type": "float",
          "annotations": []
        },
        {
          "name": "sleeper",
          "type": "LivingEntity",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Returns the position that the sleeper is moved to upon waking up, or respawning at the bed.",
      "deprecated": false
    },
    {
      "name": "getRespawnPosition",
      "modifiers": [
        "default"
      ],
      "return_type": "Optional < Vector3d >",
      "parameters": [
        {
          "name": "type",
          "type": "EntityType <?>",
          "annotations": []
        },
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "orientation",
          "type": "float",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Returns the position that the entity is moved to upon respawning at this block.",
      "deprecated": false
    },
    {
      "name": "setBedOccupied",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "sleeper",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "occupied",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "Called when a user either starts or stops sleeping in the bed.",
      "deprecated": false
    },
    {
      "name": "getBedDirection",
      "modifiers": [
        "default"
      ],
      "return_type": "Direction",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Returns the direction of the block. Same values that are returned by BlockDirectional",
      "deprecated": false
    },
    {
      "name": "isAir",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Determines this block should be treated as an air block by the rest of the code. This method is primarily useful for creating pure logic-blocks that will be invisible to the player and otherwise interact as air would.",
      "deprecated": false
    },
    {
      "name": "canBeReplacedByLeaves",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Used during tree growth to determine if newly generated leaves can replace this block.",
      "deprecated": false
    },
    {
      "name": "canBeReplacedByLogs",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Used during tree growth to determine if newly generated logs can replace this block.",
      "deprecated": false
    },
    {
      "name": "getExplosionResistance",
      "modifiers": [
        "default"
      ],
      "return_type": "float",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "explosion",
          "type": "Explosion",
          "annotations": []
        }
      ],
      "description": "Location sensitive version of getExplosionResistance",
      "deprecated": false
    },
    {
      "name": "canConnectRedstone",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "side",
          "type": "Direction",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Determine if this block can make a redstone connection on the side provided, Useful to control which sides are inputs and outputs for redstone wires.",
      "deprecated": false
    },
    {
      "name": "getPickBlock",
      "modifiers": [
        "default"
      ],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "target",
          "type": "RayTraceResult",
          "annotations": []
        },
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        }
      ],
      "description": "Called when A user uses the creative pick block button on this block",
      "deprecated": false
    },
    {
      "name": "addLandingEffects",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "worldserver",
          "type": "ServerWorld",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "state2",
          "type": "BlockState",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        },
        {
          "name": "numberOfParticles",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Allows a block to override the standard EntityLivingBase.updateFallState particles, this is a server side method that spawns particles with WorldServer.spawnParticle.",
      "deprecated": false
    },
    {
      "name": "addRunningEffects",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "Entity",
          "annotations": []
        }
      ],
      "description": "Allows a block to override the standard vanilla running particles. This is called from Entity#handleRunningEffect and is called both, Client and server side, it's up to the implementor to client check / server check. By default vanilla spawns particles only on the client and the server methods no-op.",
      "deprecated": false
    },
    {
      "name": "addHitEffects",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "target",
          "type": "RayTraceResult",
          "annotations": []
        },
        {
          "name": "manager",
          "type": "ParticleManager",
          "annotations": []
        }
      ],
      "description": "Spawn a digging particle effect in the world, this is a wrapper around EffectRenderer.addBlockHitEffects to allow the block more control over the particles. Useful when you have entirely different texture sheets for different sides/locations in the world.",
      "deprecated": false
    },
    {
      "name": "addDestroyEffects",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "manager",
          "type": "ParticleManager",
          "annotations": []
        }
      ],
      "description": "Spawn particles for when the block is destroyed. Due to the nature of how this is invoked, the x/y/z locations are not always guaranteed to host your block. So be sure to do proper sanity checks before assuming that the location is this block.",
      "deprecated": false
    },
    {
      "name": "canSustainPlant",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "facing",
          "type": "Direction",
          "annotations": []
        },
        {
          "name": "plantable",
          "type": "IPlantable",
          "annotations": []
        }
      ],
      "description": "Determines if this block can support the passed in plant, allowing it to be planted and grow. Some examples: Reeds check if its a reed, or if its sand/dirt/grass and adjacent to water Cacti checks if its a cacti, or if its sand Nether types check for soul sand Crops check for tilled soil Caves check if it's a solid surface Plains check if its grass or dirt Water check if its still water",
      "deprecated": false
    },
    {
      "name": "isFertile",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Checks if this soil is fertile, typically this means that growth rates of plants on this soil will be slightly sped up. Only vanilla case is tilledField when it is within range of water.",
      "deprecated": false
    },
    {
      "name": "isConduitFrame",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "conduit",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Determines if this block can be used as the frame of a conduit.",
      "deprecated": false
    },
    {
      "name": "isPortalFrame",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Determines if this block can be used as part of a frame of a nether portal.",
      "deprecated": false
    },
    {
      "name": "getExpDrop",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "fortune",
          "type": "int",
          "annotations": []
        },
        {
          "name": "silktouch",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Gathers how much experience this block drops when broken.",
      "deprecated": false
    },
    {
      "name": "rotate",
      "modifiers": [
        "default"
      ],
      "return_type": "BlockState",
      "parameters": [
        {
          "name": "world",
          "type": "IWorld",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "direction",
          "type": "Rotation",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getEnchantPowerBonus",
      "modifiers": [
        "default"
      ],
      "return_type": "float",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Determines the amount of enchanting power this block can provide to an enchanting table.",
      "deprecated": false
    },
    {
      "name": "onNeighborChange",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "neighbor",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Called when a tile entity on a side of this block changes is created or is destroyed.",
      "deprecated": false
    },
    {
      "name": "observedNeighborChange",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "changed",
          "type": "Block",
          "annotations": []
        },
        {
          "name": "changedPos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Called on an Observer block whenever an update for an Observer is received.",
      "deprecated": false
    },
    {
      "name": "shouldCheckWeakPower",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "side",
          "type": "Direction",
          "annotations": []
        }
      ],
      "description": "Called to determine whether to allow the a block to handle its own indirect power rather than using the default rules.",
      "deprecated": false
    },
    {
      "name": "getWeakChanges",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "If this block should be notified of weak changes. Weak changes are changes 1 block away through a solid block. Similar to comparators.",
      "deprecated": false
    },
    {
      "name": "getHarvestTool",
      "modifiers": [
        "default"
      ],
      "return_type": "ToolType",
      "parameters": [],
      "description": "Queries the class of tool required to harvest this block, if null is returned we assume that anything can harvest this block.",
      "deprecated": false
    },
    {
      "name": "getHarvestLevel",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "isToolEffective",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "tool",
          "type": "ToolType",
          "annotations": []
        }
      ],
      "description": "Checks if the specified tool type is efficient on this block, meaning that it digs at full speed.",
      "deprecated": false
    },
    {
      "name": "getSoundType",
      "modifiers": [
        "default"
      ],
      "return_type": "SoundType",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "Entity",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Sensitive version of getSoundType",
      "deprecated": false
    },
    {
      "name": "getBeaconColorMultiplier",
      "modifiers": [
        "default"
      ],
      "return_type": "float[]",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "beacon",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getFogColor",
      "modifiers": [
        "default"
      ],
      "return_type": "Vector3d",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "Entity",
          "annotations": []
        },
        {
          "name": "originalColor",
          "type": "Vector3d",
          "annotations": []
        },
        {
          "name": "partialTicks",
          "type": "float",
          "annotations": []
        }
      ],
      "description": "Use this to change the fog color used when the entity is \"inside\" a material. Vec3d is used here as \"r/g/b\" 0 - 1 values.",
      "deprecated": false
    },
    {
      "name": "getStateAtViewpoint",
      "modifiers": [
        "default"
      ],
      "return_type": "BlockState",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "viewpoint",
          "type": "Vector3d",
          "annotations": []
        }
      ],
      "description": "Used to determine the state 'viewed' by an entity (see ActiveRenderInfo#getBlockStateAtEntityViewpoint(World, Entity, float) ). Can be used by fluid blocks to determine if the viewpoint is within the fluid or not.",
      "deprecated": false
    },
    {
      "name": "isSlimeBlock",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "isStickyBlock",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "canStickTo",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "other",
          "type": "BlockState",
          "annotations": []
        }
      ],
      "description": "Determines if this block can stick to another block when pushed by a piston.",
      "deprecated": false
    },
    {
      "name": "getFlammability",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "face",
          "type": "Direction",
          "annotations": []
        }
      ],
      "description": "Chance that fire will spread and consume this block. 300 being a 100% chance, 0, being a 0% chance.",
      "deprecated": false
    },
    {
      "name": "isFlammable",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "face",
          "type": "Direction",
          "annotations": []
        }
      ],
      "description": "Called when fire is updating, checks if a block face can catch fire.",
      "deprecated": false
    },
    {
      "name": "catchFire",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "face",
          "type": "Direction",
          "annotations": [
            "Nullable"
          ]
        },
        {
          "name": "igniter",
          "type": "LivingEntity",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "If the block is flammable, this is called when it gets lit on fire.",
      "deprecated": false
    },
    {
      "name": "getFireSpreadSpeed",
      "modifiers": [
        "default"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "face",
          "type": "Direction",
          "annotations": []
        }
      ],
      "description": "Called when fire is updating on a neighbor block. The higher the number returned, the faster fire will spread around this block.",
      "deprecated": false
    },
    {
      "name": "isFireSource",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IWorldReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "side",
          "type": "Direction",
          "annotations": []
        }
      ],
      "description": "Currently only called by fire when it is on top of this block. Returning true will prevent the fire from naturally dying during updating. Also prevents firing from dying from rain.",
      "deprecated": false
    },
    {
      "name": "canEntityDestroy",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "Entity",
          "annotations": []
        }
      ],
      "description": "Determines if this block is can be destroyed by the specified entities normal behavior.",
      "deprecated": false
    },
    {
      "name": "isBurning",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Determines if this block should set fire and deal fire damage to entities coming into contact with it.",
      "deprecated": false
    },
    {
      "name": "getAiPathNodeType",
      "modifiers": [
        "default"
      ],
      "return_type": "PathNodeType",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        }
      ],
      "description": "Get the PathNodeType for this block. Return null for vanilla behavior.",
      "deprecated": false
    },
    {
      "name": "getAiPathNodeType",
      "modifiers": [
        "default"
      ],
      "return_type": "PathNodeType",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "entity",
          "type": "MobEntity",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Get the PathNodeType for this block. Return null for vanilla behavior.",
      "deprecated": false
    },
    {
      "name": "canDropFromExplosion",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "explosion",
          "type": "Explosion",
          "annotations": []
        }
      ],
      "description": "Determines if this block should drop loot when exploded.",
      "deprecated": false
    },
    {
      "name": "onBlockExploded",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "explosion",
          "type": "Explosion",
          "annotations": []
        }
      ],
      "description": "Called when the block is destroyed by an explosion. Useful for allowing the block to take into account tile entities, state, etc. when exploded, before it is removed.",
      "deprecated": false
    },
    {
      "name": "collisionExtendsVertically",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "collidingEntity",
          "type": "Entity",
          "annotations": []
        }
      ],
      "description": "Determines if this block's collision box should be treated as though it can extend above its block space. This can be used to replicate fence and wall behavior.",
      "deprecated": false
    },
    {
      "name": "shouldDisplayFluidOverlay",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "world",
          "type": "IBlockDisplayReader",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "fluidState",
          "type": "FluidState",
          "annotations": []
        }
      ],
      "description": "Called to determine whether this block should use the fluid overlay texture or flowing texture when it is placed under the fluid.",
      "deprecated": false
    },
    {
      "name": "getToolModifiedState",
      "modifiers": [
        "default"
      ],
      "return_type": "BlockState",
      "parameters": [
        {
          "name": "world",
          "type": "World",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "player",
          "type": "PlayerEntity",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "toolType",
          "type": "ToolType",
          "annotations": []
        }
      ],
      "description": "Returns the state that this block should transform into when right clicked by a tool. For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till. Return null if vanilla behavior should be disabled.",
      "deprecated": false
    },
    {
      "name": "isScaffolding",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "entity",
          "type": "LivingEntity",
          "annotations": []
        }
      ],
      "description": "Checks if a player or entity handles movement on this block like scaffolding.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.16.5/net/minecraftforge/common/extensions/IForgeBlockState.html"
}