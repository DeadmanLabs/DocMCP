{
  "type": "interface",
  "name": "Channel.VersionTest",
  "qualified_name": "net.minecraftforge.network.Channel.VersionTest",
  "package": "net.minecraftforge.network",
  "modifiers": [
    "public",
    "static",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "ACCEPT_MISSING",
      "modifiers": [
        "static",
        "final"
      ],
      "type": "Channel.VersionTest",
      "description": "",
      "deprecated": false
    },
    {
      "name": "ACCEPT_VANILLA",
      "modifiers": [
        "static",
        "final"
      ],
      "type": "Channel.VersionTest",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [],
  "methods": [
    {
      "name": "exact",
      "modifiers": [
        "static"
      ],
      "return_type": "Channel.VersionTest",
      "parameters": [
        {
          "name": "version",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "accepts",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "status",
          "type": "Channel.VersionTest.Status",
          "annotations": []
        },
        {
          "name": "version",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Tests is the specified version is compatible with this channel. This determines if a we can communicate with a remote end. The status parameter specifies wither or not the remote knows about out channel or not. If the value is MISSING or VANILLA then the version parameter is meaningless. If the status is invalid reference PRESSENT then the version parameter is the version presented by the remote connection.",
      "deprecated": false
    },
    {
      "name": "negate",
      "modifiers": [
        "default"
      ],
      "return_type": "Channel.VersionTest",
      "parameters": [],
      "description": "Returns a instance that represents the logical negation of this instance.",
      "deprecated": false
    },
    {
      "name": "and",
      "modifiers": [
        "default"
      ],
      "return_type": "Channel.VersionTest",
      "parameters": [
        {
          "name": "other",
          "type": "Channel.VersionTest",
          "annotations": []
        }
      ],
      "description": "Returns a composed instance that represents a short-circuiting logical AND of this instance and another. When evaluating the composed instance, if this instance is false , then the other instance is not evaluated.",
      "deprecated": false
    },
    {
      "name": "or",
      "modifiers": [
        "default"
      ],
      "return_type": "Channel.VersionTest",
      "parameters": [
        {
          "name": "other",
          "type": "Channel.VersionTest",
          "annotations": []
        }
      ],
      "description": "Returns a composed instance that represents a short-circuiting logical OR of this instance and another. When evaluating the composed instance, if this instance is true , then the other instance is not evaluated.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.21/net/minecraftforge/network/Channel.VersionTest.html"
}