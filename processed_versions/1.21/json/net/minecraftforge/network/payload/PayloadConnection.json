{
  "type": "interface",
  "name": ">",
  "qualified_name": "net.minecraftforge.network.payload.>",
  "package": "net.minecraftforge.network.payload",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "protocol",
      "modifiers": [],
      "return_type": "PayloadProtocol <NEWBUF, NEWBASE>",
      "parameters": [
        {
          "name": "protocol",
          "type": "NetworkProtocol <NEWBUF>",
          "annotations": [
            "Nullable",
            "Nullable"
          ]
        }
      ],
      "description": "Creates a builder grouping together all packets under the same protocol. This will validate that the protocol matches before the packet is sent or received.",
      "deprecated": false
    },
    {
      "name": "protocol",
      "modifiers": [],
      "return_type": "PayloadHandlerProtocol <NEWBUF, NEWBASE>",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        },
        {
          "name": "protocol",
          "type": "NetworkProtocol <NEWBUF>",
          "annotations": [
            "Nullable",
            "Nullable"
          ]
        }
      ],
      "description": "Creates a builder grouping together all packets under the same protocol. This will validate that the protocol matches before the packet is sent or received.",
      "deprecated": false
    },
    {
      "name": "protocol",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "protocol",
          "type": "NetworkProtocol <BUF>",
          "annotations": [
            "Nullable",
            "Nullable"
          ]
        },
        {
          "name": "consumer",
          "type": "Consumer < PayloadProtocol <BUF, BASE >>",
          "annotations": []
        }
      ],
      "description": "Consumer version of protocol(NetworkProtocol) . The Consumer will immediately be called with the created protocol.",
      "deprecated": false
    },
    {
      "name": "protocol",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        },
        {
          "name": "protocol",
          "type": "NetworkProtocol <BUF>",
          "annotations": [
            "Nullable",
            "Nullable"
          ]
        },
        {
          "name": "consumer",
          "type": "Consumer < PayloadHandlerProtocol <BUF, NEWBASE>>",
          "annotations": []
        }
      ],
      "description": "Consumer version of protocol(AttributeKey,NetworkProtocol) . The Consumer will immediately be called with the created protocol.",
      "deprecated": false
    },
    {
      "name": "configuration",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadProtocol < FriendlyByteBuf , BASE >",
      "parameters": [],
      "description": "Creates a builder grouping together packets that are only valid when under the Configuration protocol. This will validate that the protocol matches before the packet is sent or received.",
      "deprecated": false
    },
    {
      "name": "configuration",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadHandlerProtocol < FriendlyByteBuf , NEWBASE>",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        }
      ],
      "description": "Creates a builder grouping together packets that are only valid when under the Configuration protocol. This will validate that the protocol matches before the packet is sent or received.",
      "deprecated": false
    },
    {
      "name": "configuration",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "consumer",
          "type": "Consumer < PayloadProtocol < FriendlyByteBuf , BASE >>",
          "annotations": []
        }
      ],
      "description": "Consumer version of configuration() . The Consumer will immediately be called with the created protocol.",
      "deprecated": false
    },
    {
      "name": "configuration",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        },
        {
          "name": "consumer",
          "type": "Consumer < PayloadHandlerProtocol < FriendlyByteBuf , NEWBASE>>",
          "annotations": []
        }
      ],
      "description": "Consumer version of configuration(AttributeKey) . The Consumer will immediately be called with the created protocol.",
      "deprecated": false
    },
    {
      "name": "login",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadProtocol < FriendlyByteBuf , BASE >",
      "parameters": [],
      "description": "Creates a builder grouping together packets that are only valid when under the Login protocol. This will validate that the protocol matches before the packet is sent or received.",
      "deprecated": false
    },
    {
      "name": "login",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadHandlerProtocol < FriendlyByteBuf , NEWBASE>",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        }
      ],
      "description": "Creates a builder grouping together packets that are only valid when under the Login protocol. This will validate that the protocol matches before the packet is sent or received.",
      "deprecated": false
    },
    {
      "name": "login",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "consumer",
          "type": "Consumer < PayloadProtocol < FriendlyByteBuf , BASE >>",
          "annotations": []
        }
      ],
      "description": "Consumer version of login() . The Consumer will immediately be called with the created protocol.",
      "deprecated": false
    },
    {
      "name": "login",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        },
        {
          "name": "consumer",
          "type": "Consumer < PayloadHandlerProtocol < FriendlyByteBuf , NEWBASE>>",
          "annotations": []
        }
      ],
      "description": "Consumer version of login(AttributeKey) . The Consumer will immediately be called with the created protocol.",
      "deprecated": false
    },
    {
      "name": "play",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadProtocol < RegistryFriendlyByteBuf , BASE >",
      "parameters": [],
      "description": "Creates a builder grouping together packets that are only valid when under the Play protocol. This will validate that the protocol matches before the packet is sent or received.",
      "deprecated": false
    },
    {
      "name": "play",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadHandlerProtocol < RegistryFriendlyByteBuf , NEWBASE>",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        }
      ],
      "description": "Creates a builder grouping together packets that are only valid when under the Login protocol. This will validate that the protocol matches before the packet is sent or received.",
      "deprecated": false
    },
    {
      "name": "play",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "consumer",
          "type": "Consumer < PayloadProtocol < RegistryFriendlyByteBuf , BASE >>",
          "annotations": []
        }
      ],
      "description": "Consumer version of play() . The Consumer will immediately be called with the created protocol.",
      "deprecated": false
    },
    {
      "name": "play",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        },
        {
          "name": "consumer",
          "type": "Consumer < PayloadHandlerProtocol < RegistryFriendlyByteBuf , NEWBASE>>",
          "annotations": []
        }
      ],
      "description": "Consumer version of play(AttributeKey) . The Consumer will immediately be called with the created protocol.",
      "deprecated": false
    },
    {
      "name": "any",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadProtocol < FriendlyByteBuf , BASE >",
      "parameters": [],
      "description": "Creates a builder grouping together packets that are valid under any protocol. It is not recommended to do this, instead you should use one of the other methods in this class to make sure your packets have basic validation.",
      "deprecated": false
    },
    {
      "name": "any",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadHandlerProtocol < FriendlyByteBuf , NEWBASE>",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        }
      ],
      "description": "Creates a builder grouping together packets that are valid under any protocol. It is not recommended to do this, instead you should use one of the other methods in this class to make sure your packets have basic validation.",
      "deprecated": false
    },
    {
      "name": "any",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "consumer",
          "type": "Consumer < PayloadProtocol < FriendlyByteBuf , BASE >>",
          "annotations": []
        }
      ],
      "description": "Consumer version of any() . The Consumer will immediately be called with the created protocol. It is not recommended to do this, instead you should use one of the other methods in this class to make sure your packets have basic validation.",
      "deprecated": false
    },
    {
      "name": "any",
      "modifiers": [
        "default"
      ],
      "return_type": "PayloadConnection < BASE >",
      "parameters": [
        {
          "name": "context",
          "type": "io.netty.util.AttributeKey<CTX>",
          "annotations": []
        },
        {
          "name": "consumer",
          "type": "Consumer < PayloadHandlerProtocol < FriendlyByteBuf , NEWBASE>>",
          "annotations": []
        }
      ],
      "description": "Consumer version of any(AttributeKey) . The Consumer will immediately be called with the created protocol. It is not recommended to do this, instead you should use one of the other methods in this class to make sure your packets have basic validation.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.21/net/minecraftforge/network/payload/PayloadConnection.html"
}