{
  "type": "class",
  "name": "CapabilityToken<T>",
  "qualified_name": "net.minecraftforge.common.capabilities.CapabilityToken<T>",
  "package": "net.minecraftforge.common.capabilities",
  "modifiers": [
    "public",
    "abstract",
    "class"
  ],
  "annotations": [],
  "description": "Inspired by TypeToken , use a subclass to capture generic types. Then uses a transformer to convert that generic into a string returned by getType() This allows us to know the generic type, without having a hard reference to the class. Example usage: public static Capability<IDataHolder> DATA_HOLDER_CAPABILITY = CapabilityManager.get(new CapabilityToken<>(){});",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [
    {
      "name": "CapabilityToken",
      "modifiers": [
        "public"
      ],
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "getType",
      "modifiers": [
        "protected",
        "final"
      ],
      "return_type": "String",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "toString",
      "modifiers": [
        "public"
      ],
      "return_type": "String",
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.21/net/minecraftforge/common/capabilities/CapabilityToken.html"
}