{
  "type": "interface",
  "name": "Test.EventListenerGroup.EventListenerCollector",
  "qualified_name": "net.neoforged.testframework.Test.EventListenerGroup.EventListenerCollector",
  "package": "net.neoforged.testframework",
  "modifiers": [
    "public",
    "static",
    "interface"
  ],
  "annotations": [],
  "description": "A collector of event listeners which automatically unregisters listeners when a test is disabled.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "register",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "object",
          "type": "Object",
          "annotations": []
        }
      ],
      "description": "Register an instance object or a Class , and add listeners for all SubscribeEvent annotated methods found there. Depending on what is passed as an argument, different listener creation behaviour is performed. Object Instance Scanned for non-static methods annotated with SubscribeEvent and creates listeners for each method found. Class Instance Scanned for static methods annotated with SubscribeEvent and creates listeners for each method found.",
      "deprecated": false
    },
    {
      "name": "unregisterAll",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "bus",
          "type": "net.neoforged.bus.api.IEventBus",
          "annotations": []
        }
      ],
      "description": "Unregisters all the listeners added through this collector.",
      "deprecated": false
    },
    {
      "name": "registerAll",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "bus",
          "type": "net.neoforged.bus.api.IEventBus",
          "annotations": []
        }
      ],
      "description": "Registers all the listeners added through this collector.",
      "deprecated": false
    },
    {
      "name": "addListener",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "priority",
          "type": "net.neoforged.bus.api.EventPriority",
          "annotations": []
        },
        {
          "name": "receiveCancelled",
          "type": "boolean",
          "annotations": []
        },
        {
          "name": "eventType",
          "type": "Class <T>",
          "annotations": []
        },
        {
          "name": "consumer",
          "type": "Consumer <T>",
          "annotations": []
        }
      ],
      "description": "Add a consumer listener with the specified EventPriority and potentially cancelled events. Use this method when one of the other methods fails to determine the concrete Event subclass that is intended to be subscribed to.",
      "deprecated": false
    },
    {
      "name": "addListener",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "priority",
          "type": "net.neoforged.bus.api.EventPriority",
          "annotations": []
        },
        {
          "name": "receiveCancelled",
          "type": "boolean",
          "annotations": []
        },
        {
          "name": "consumer",
          "type": "Consumer <T>",
          "annotations": []
        }
      ],
      "description": "Add a consumer listener with the specified EventPriority and potentially cancelled events.",
      "deprecated": false
    },
    {
      "name": "addListener",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "consumer",
          "type": "Consumer <T>",
          "annotations": []
        }
      ],
      "description": "Add a consumer listener with default EventPriority.NORMAL and not receiving cancelled events.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.20.6-neoforge/net/neoforged/testframework/Test.EventListenerGroup.EventListenerCollector.html"
}