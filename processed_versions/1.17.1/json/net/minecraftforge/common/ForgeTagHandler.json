{
  "type": "class",
  "name": "ForgeTagHandler",
  "qualified_name": "net.minecraftforge.common.ForgeTagHandler",
  "package": "net.minecraftforge.common",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "LOGGER",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": "org.apache.logging.log4j.Logger",
      "description": "",
      "deprecated": false
    },
    {
      "name": "customTagTypeNames",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "Set < ResourceLocation >",
      "description": "",
      "deprecated": false
    },
    {
      "name": "tagTypesSet",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "boolean",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "ForgeTagHandler",
      "modifiers": [
        "public"
      ],
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "getTagHelper",
      "modifiers": [
        "private",
        "static"
      ],
      "return_type": "StaticTagHelper <T>",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "validateRegistrySupportsTags",
      "modifiers": [
        "private",
        "static"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <?>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "makeWrapperTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tag.Named <T>",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "Helper method that creates a named tag for a forge registry, erroring if the registry doesn't support custom tag types. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "createOptionalTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tags.IOptionalNamedTag <T>",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "Helper method that creates an optional tag for a forge registry, erroring if the registry doesn't support custom tag types. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "createOptionalTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tags.IOptionalNamedTag <T>",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "defaults",
          "type": "Set < Supplier <T>>",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Helper method that creates an optional tag for a forge registry, erroring if the registry doesn't support custom tag types. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "makeWrapperTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tag.Named <T>",
      "parameters": [
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "Helper method for creating named tags for custom forge registries. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "createOptionalTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tags.IOptionalNamedTag <T>",
      "parameters": [
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "Helper method for creating optional tags for custom forge registries. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "createOptionalTag",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Tags.IOptionalNamedTag <T>",
      "parameters": [
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "defaults",
          "type": "Set < Supplier <T>>",
          "annotations": [
            "Nullable"
          ]
        }
      ],
      "description": "Helper method for creating optional tags for custom forge registries. If the custom tag types have not been set yet, this method falls back and creates the tag reference delaying adding it to the tag registry to allow for statically initializing and referencing the tag.",
      "deprecated": false
    },
    {
      "name": "getCustomTagTypeNames",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Set < ResourceLocation >",
      "parameters": [],
      "description": "Gets the all the registry names of registries that support custom tag types.",
      "deprecated": false
    },
    {
      "name": "setCustomTagTypes",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "customTagTypesNames",
          "type": "Set < ResourceLocation >",
          "annotations": []
        }
      ],
      "description": "Sets the set containing the resource locations representing the registry name of each forge registry that supports custom tag types.",
      "deprecated": false
    },
    {
      "name": "createCustomTagTypeReaders",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Map < ResourceLocation ,â€‹ TagLoader <?>>",
      "parameters": [],
      "description": "Creates a map for custom tag type to tag reader",
      "deprecated": false
    },
    {
      "name": "getWrapperRegistry",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "Optional <? extends Registry <T>>",
      "parameters": [
        {
          "name": "key",
          "type": "ResourceKey <? extends Registry <T>>",
          "annotations": []
        },
        {
          "name": "vanillaReg",
          "type": "Optional <? extends Registry <T>>",
          "annotations": []
        }
      ],
      "description": "Wraps the forge registry if it supports tags into the internal registry for use in serialization",
      "deprecated": false
    },
    {
      "name": "reinjectOptionalTags",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "TagContainer",
      "parameters": [
        {
          "name": "tagCollectionSupplier",
          "type": "TagContainer",
          "annotations": []
        }
      ],
      "description": "Helper to reinject missing optional tags.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.17.1/net/minecraftforge/common/ForgeTagHandler.html"
}