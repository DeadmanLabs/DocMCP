{
  "type": "class",
  "name": "T>>",
  "qualified_name": "net.minecraftforge.fmllegacy.T>>",
  "package": "net.minecraftforge.fmllegacy",
  "modifiers": [
    "public",
    "final",
    "class"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "name",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "ResourceLocation",
      "description": "",
      "deprecated": false
    },
    {
      "name": "value",
      "modifiers": [
        "private"
      ],
      "type": "T extends IForgeRegistryEntry <? super T >",
      "description": "",
      "deprecated": false
    },
    {
      "name": "EMPTY",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "RegistryObject <?>",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "RegistryObject",
      "modifiers": [
        "private"
      ],
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "RegistryObject",
      "modifiers": [
        "private"
      ],
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registryType",
          "type": "Supplier < Class <? super V>>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "RegistryObject",
      "modifiers": [
        "private"
      ],
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registry",
          "type": "IForgeRegistry <V>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "RegistryObject",
      "modifiers": [
        "private"
      ],
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "baseType",
          "type": "Class <V>",
          "annotations": []
        },
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "of",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "RegistryObject <U>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registryType",
          "type": "Supplier < Class <? super T>>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "of",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "RegistryObject <U>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "of",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "RegistryObject <U>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "baseType",
          "type": "Class <T>",
          "annotations": []
        },
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "empty",
      "modifiers": [
        "private",
        "static"
      ],
      "return_type": "RegistryObject <T>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "get",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [],
      "description": "Directly retrieves the wrapped Registry Object. This value will automatically be updated when the backing registry is updated. Will throw NPE if the value is null, use isPresent to check first. Or use any of the other guarded functions.",
      "deprecated": false
    },
    {
      "name": "updateReference",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <? extends T >",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getId",
      "modifiers": [
        "public"
      ],
      "return_type": "ResourceLocation",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "stream",
      "modifiers": [
        "public"
      ],
      "return_type": "Stream < T >",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "isPresent",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "Return true if there is a mod object present, otherwise false .",
      "deprecated": false
    },
    {
      "name": "ifPresent",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "consumer",
          "type": "Consumer <? super T >",
          "annotations": []
        }
      ],
      "description": "If a mod object is present, invoke the specified consumer with the object, otherwise do nothing.",
      "deprecated": false
    },
    {
      "name": "filter",
      "modifiers": [
        "public"
      ],
      "return_type": "RegistryObject < T >",
      "parameters": [
        {
          "name": "predicate",
          "type": "Predicate <? super T >",
          "annotations": []
        }
      ],
      "description": "If a mod object is present, and the mod object matches the given predicate, return an RegistryObject describing the value, otherwise return an empty RegistryObject .",
      "deprecated": false
    },
    {
      "name": "map",
      "modifiers": [
        "public"
      ],
      "return_type": "Optional <U>",
      "parameters": [
        {
          "name": "mapper",
          "type": "Function <? super T ,​? extends U>",
          "annotations": []
        }
      ],
      "description": "If a mod object is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result. Otherwise return an empty Optional .",
      "deprecated": false
    },
    {
      "name": "flatMap",
      "modifiers": [
        "public"
      ],
      "return_type": "Optional <U>",
      "parameters": [
        {
          "name": "mapper",
          "type": "Function <? super T ,​ Optional <U>>",
          "annotations": []
        }
      ],
      "description": "If a value is present, apply the provided Optional -bearing mapping function to it, return that result, otherwise return an empty Optional . This method is similar to map(Function) , but the provided mapper is one whose result is already an Optional , and if invoked, flatMap does not wrap it with an additional Optional .",
      "deprecated": false
    },
    {
      "name": "lazyMap",
      "modifiers": [
        "public"
      ],
      "return_type": "Supplier <U>",
      "parameters": [
        {
          "name": "mapper",
          "type": "Function <? super T ,​? extends U>",
          "annotations": []
        }
      ],
      "description": "If a mod object is present, lazily apply the provided mapping function to it, returning a supplier for the transformed result. If this object is empty, or the mapping function returns null , the supplier will return null .",
      "deprecated": false
    },
    {
      "name": "orElse",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "other",
          "type": "T",
          "annotations": []
        }
      ],
      "description": "Return the mod object if present, otherwise return other .",
      "deprecated": false
    },
    {
      "name": "orElseGet",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "other",
          "type": "Supplier <? extends T >",
          "annotations": []
        }
      ],
      "description": "Return the mod object if present, otherwise invoke other and return the result of that invocation.",
      "deprecated": false
    },
    {
      "name": "orElseThrow",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "exceptionSupplier",
          "type": "Supplier <? extends X>",
          "annotations": []
        }
      ],
      "description": "Return the contained mod object, if present, otherwise throw an exception to be created by the provided supplier.",
      "deprecated": false
    },
    {
      "name": "equals",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "obj",
          "type": "Object",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "hashCode",
      "modifiers": [
        "public"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.17.1/net/minecraftforge/fmllegacy/RegistryObject.html"
}