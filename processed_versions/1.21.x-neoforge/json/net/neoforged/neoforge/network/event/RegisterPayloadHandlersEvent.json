{
  "type": "class",
  "name": "RegisterPayloadHandlersEvent",
  "qualified_name": "net.neoforged.neoforge.network.event.RegisterPayloadHandlersEvent",
  "package": "net.neoforged.neoforge.network.event",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "Event fired when the NetworkRegistry is being set up. This event is used to collect all the payload types and their handlers that should be used on the network. There are a few base rules for custom payloads: Payloads should not write their ids within their StreamCodec , as this will be done automatically. Payloads must be registered before they can be sent over the network. Payloads may only be sent over the ConnectionProtocol they were registered for. By default, PayloadRegistrar will wrap handlers so they execute on the main thread instead of the network thread. Payloads are always serialized, including for memory connections (singleplayer and LAN hosts).",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [
    {
      "name": "RegisterPayloadHandlersEvent",
      "modifiers": [
        "public"
      ],
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "registrar",
      "modifiers": [
        "public"
      ],
      "return_type": "PayloadRegistrar",
      "parameters": [
        {
          "name": "version",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "Creates a new PayloadRegistrar , a utility for registering payloads using a builder-style format.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.21.x-neoforge/net/neoforged/neoforge/network/event/RegisterPayloadHandlersEvent.html"
}