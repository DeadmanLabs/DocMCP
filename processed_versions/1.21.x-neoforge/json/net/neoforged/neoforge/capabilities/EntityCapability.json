{
  "type": "class",
  "name": "C>",
  "qualified_name": "net.neoforged.neoforge.capabilities.C>",
  "package": "net.neoforged.neoforge.capabilities",
  "modifiers": [
    "public",
    "final",
    "class"
  ],
  "annotations": [],
  "description": "An EntityCapability gives flexible access to objects of type T from entities. Querying an entity capability To get an object of type T , use Entity.getCapability(EntityCapability) . For example, to query an item handler from an entity: Entity entity = ...; IItemHandler maybeHandler = entity.getCapability(Capabilities.ItemHandler.ENTITY); if (maybeHandler != null) { // Use maybeHandler } Providing an entity capability To provide objects of type T , register providers to RegisterCapabilitiesEvent . For example: modBus.addListener((RegisterCapabilitiesEvent event) -> { event.registerEntity( Capabilities.ItemHandler.ENTITY, // capability to register for MY_ENTITY_TYPE, (myEntity, context) -> <return the IItemHandler for myEntity>); });",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object",
      "net.neoforged.neoforge.capabilities.BaseCapability"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "registry",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": "CapabilityRegistry < EntityCapability <?, ?>>",
      "description": "",
      "deprecated": false
    },
    {
      "name": "providers",
      "modifiers": [
        "final"
      ],
      "type": "Map < EntityType <?>, List < ICapabilityProvider < Entity , C , T >>>",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "EntityCapability",
      "modifiers": [
        "private"
      ],
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "typeClass",
          "type": "Class < T >",
          "annotations": []
        },
        {
          "name": "contextClass",
          "type": "Class < C >",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "create",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "EntityCapability <T, C>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "typeClass",
          "type": "Class <T>",
          "annotations": []
        },
        {
          "name": "contextClass",
          "type": "Class <C>",
          "annotations": []
        }
      ],
      "description": "Creates a new entity capability, or gets it if it already exists.",
      "deprecated": false
    },
    {
      "name": "createVoid",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "EntityCapability <T, Void >",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "typeClass",
          "type": "Class <T>",
          "annotations": []
        }
      ],
      "description": "Creates a new entity capability with Void context, or gets it if it already exists. This should be used for capabilities that do not require any additional context.",
      "deprecated": false
    },
    {
      "name": "createSided",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "EntityCapability <T, @Nullable Direction >",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "typeClass",
          "type": "Class <T>",
          "annotations": []
        }
      ],
      "description": "Creates a new entity capability with nullable Direction context, or gets it if it already exists. The side is generally the side from which the entity is being accessed, or null if it is not known or not a specific side.",
      "deprecated": false
    },
    {
      "name": "getAll",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "List < EntityCapability <?, ?>>",
      "parameters": [],
      "description": "Returns a new immutable copy of all the currently known entity capabilities.",
      "deprecated": false
    },
    {
      "name": "getCapability",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "entity",
          "type": "Entity",
          "annotations": []
        },
        {
          "name": "context",
          "type": "C",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.21.x-neoforge/net/neoforged/neoforge/capabilities/EntityCapability.html"
}