{
  "type": "class",
  "name": "ModMismatchEvent",
  "qualified_name": "net.neoforged.neoforge.event.ModMismatchEvent",
  "package": "net.neoforged.neoforge.event",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "Fires when the mod loader is in the process of loading a world that was last saved with mod versions that differ from the currently-loaded versions. This can be used to enqueue work to run at a later point, such as multi-file migration of data. Note that level and world information has not yet been fully loaded; as such, it is unsafe to access server or level information during handling of this event. This event is not cancellable, and does not invalid reference have a result . This event is fired on the mod-specific event bus, on both logical sides.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "levelDirectory",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "LevelStorageSource.LevelDirectory",
      "description": "The level being loaded. Useful for things like DimensionDataStorage to manage multiple files changing between mod versions.",
      "deprecated": false
    },
    {
      "name": "versionDifferences",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "HashMap < String , ModMismatchEvent.MismatchedVersionInfo >",
      "description": "A set of previously-known versions that have mismatched with the currently loaded versions.",
      "deprecated": false
    },
    {
      "name": "resolved",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "HashMap < String , net.neoforged.fml.ModContainer>",
      "description": "Which mods have specified that they have handled version mismatches.",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "ModMismatchEvent",
      "modifiers": [
        "public"
      ],
      "parameters": [
        {
          "name": "levelDirectory",
          "type": "LevelStorageSource.LevelDirectory",
          "annotations": []
        },
        {
          "name": "previousVersions",
          "type": "Map < String , org.apache.maven.artifact.versioning.ArtifactVersion>",
          "annotations": []
        },
        {
          "name": "missingVersions",
          "type": "Map < String , org.apache.maven.artifact.versioning.ArtifactVersion>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "getLevelDirectory",
      "modifiers": [
        "public"
      ],
      "return_type": "LevelStorageSource.LevelDirectory",
      "parameters": [],
      "description": "Gets the current level directory for the world being loaded. Can be used for file operations and manual modification of mod files before world load.",
      "deprecated": false
    },
    {
      "name": "getPreviousVersion",
      "modifiers": [
        "public"
      ],
      "return_type": "@Nullable org.apache.maven.artifact.versioning.ArtifactVersion",
      "parameters": [
        {
          "name": "modId",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "Fetch a previous version of a given mod, if it has been mismatched.",
      "deprecated": false
    },
    {
      "name": "getCurrentVersion",
      "modifiers": [
        "public"
      ],
      "return_type": "@Nullable org.apache.maven.artifact.versioning.ArtifactVersion",
      "parameters": [
        {
          "name": "modId",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "markResolved",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "modId",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "Marks the mod version mismatch as having been resolved safely by the current mod.",
      "deprecated": false
    },
    {
      "name": "wasResolved",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "modId",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "Fetches the status of a mod mismatch handling state.",
      "deprecated": false
    },
    {
      "name": "getVersionDifference",
      "modifiers": [
        "public"
      ],
      "return_type": "Optional < ModMismatchEvent.MismatchedVersionInfo >",
      "parameters": [
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getResolver",
      "modifiers": [
        "public"
      ],
      "return_type": "Optional <net.neoforged.fml.ModContainer>",
      "parameters": [
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "anyUnresolved",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getUnresolved",
      "modifiers": [
        "public"
      ],
      "return_type": "Stream < ModMismatchEvent.MismatchResolutionResult >",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "anyResolved",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getResolved",
      "modifiers": [
        "public"
      ],
      "return_type": "Stream < ModMismatchEvent.MismatchResolutionResult >",
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.21.x-neoforge/net/neoforged/neoforge/event/ModMismatchEvent.html"
}