{
  "type": "class",
  "name": "ComponentItemHandler",
  "qualified_name": "net.neoforged.neoforge.items.ComponentItemHandler",
  "package": "net.neoforged.neoforge.items",
  "modifiers": [
    "public",
    "class"
  ],
  "annotations": [],
  "description": "Variant of ItemStackHandler for use with data components. The actual data storage is managed by a data component, and all changes will write back to that component. To use this class, register a new DataComponentType which holds an ItemContainerContents for your item. Then reference that component from your ICapabilityProvider passed to RegisterCapabilitiesEvent.registerItem(net.neoforged.neoforge.capabilities.ItemCapability<T, C>, net.neoforged.neoforge.capabilities.ICapabilityProvider<net.minecraft.world.item.ItemStack, C, T>, net.minecraft.world.level.ItemLike...) to create an instance of this class.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "parent",
      "modifiers": [
        "protected",
        "final"
      ],
      "type": "MutableDataComponentHolder",
      "description": "",
      "deprecated": false
    },
    {
      "name": "component",
      "modifiers": [
        "protected",
        "final"
      ],
      "type": "DataComponentType < ItemContainerContents >",
      "description": "",
      "deprecated": false
    },
    {
      "name": "size",
      "modifiers": [
        "protected",
        "final"
      ],
      "type": "int",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "ComponentItemHandler",
      "modifiers": [
        "public"
      ],
      "parameters": [
        {
          "name": "parent",
          "type": "MutableDataComponentHolder",
          "annotations": []
        },
        {
          "name": "component",
          "type": "DataComponentType < ItemContainerContents >",
          "annotations": []
        },
        {
          "name": "size",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Creates a new ComponentItemHandler with target size. If the existing component is smaller than the given size, it will be expanded on write.",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "getSlots",
      "modifiers": [
        "public"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "Description copied from interface: IItemHandler",
      "deprecated": false
    },
    {
      "name": "getStackInSlot",
      "modifiers": [
        "public"
      ],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Description copied from interface: IItemHandler",
      "deprecated": false
    },
    {
      "name": "setStackInSlot",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "description": "Description copied from interface: IItemHandlerModifiable",
      "deprecated": false
    },
    {
      "name": "insertItem",
      "modifiers": [
        "public"
      ],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        },
        {
          "name": "toInsert",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "simulate",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "Description copied from interface: IItemHandler",
      "deprecated": false
    },
    {
      "name": "extractItem",
      "modifiers": [
        "public"
      ],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        },
        {
          "name": "amount",
          "type": "int",
          "annotations": []
        },
        {
          "name": "simulate",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "Description copied from interface: IItemHandler",
      "deprecated": false
    },
    {
      "name": "getSlotLimit",
      "modifiers": [
        "public"
      ],
      "return_type": "int",
      "parameters": [
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Description copied from interface: IItemHandler",
      "deprecated": false
    },
    {
      "name": "isItemValid",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "description": "Description copied from interface: IItemHandler",
      "deprecated": false
    },
    {
      "name": "onContentsChanged",
      "modifiers": [
        "protected"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        },
        {
          "name": "oldStack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "newStack",
          "type": "ItemStack",
          "annotations": []
        }
      ],
      "description": "Called from updateContents(net.minecraft.world.item.component.ItemContainerContents, net.minecraft.world.item.ItemStack, int) after the stack stored in a slot has been updated. Modifications to the stacks used as parameters here will not write-back to the stored data.",
      "deprecated": false
    },
    {
      "name": "getContents",
      "modifiers": [
        "protected"
      ],
      "return_type": "ItemContainerContents",
      "parameters": [],
      "description": "Retrieves the ItemContainerContents from the parent object's data component map.",
      "deprecated": false
    },
    {
      "name": "getStackFromContents",
      "modifiers": [
        "protected"
      ],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "contents",
          "type": "ItemContainerContents",
          "annotations": []
        },
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Retrieves a copy of a single stack from the underlying data component, returning ItemStack.EMPTY if the component does not have a slot present. Throws an exception if the slot is out-of-bounds for this capability.",
      "deprecated": false
    },
    {
      "name": "updateContents",
      "modifiers": [
        "protected"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "contents",
          "type": "ItemContainerContents",
          "annotations": []
        },
        {
          "name": "stack",
          "type": "ItemStack",
          "annotations": []
        },
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Performs a copy and write operation on the underlying data component, changing the stack in the target slot. If the existing component is larger than getSlots() , additional slots will not be truncated.",
      "deprecated": false
    },
    {
      "name": "validateSlotIndex",
      "modifiers": [
        "protected",
        "final"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "slot",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "Throws UnsupportedOperationException if the provided slot index is invalid.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.21.x-neoforge/net/neoforged/neoforge/items/ComponentItemHandler.html"
}