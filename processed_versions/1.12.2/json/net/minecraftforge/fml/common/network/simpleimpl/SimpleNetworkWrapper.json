{
  "type": "class",
  "name": "SimpleNetworkWrapper",
  "qualified_name": "SimpleNetworkWrapper",
  "package": "",
  "modifiers": [],
  "annotations": [],
  "description": "This class is a simplified netty wrapper for those not wishing to deal with the full power of netty. It provides a simple message driven system, based on a discriminator byte over the custom packet channel. It assumes that you have a series of unique message types with each having a unique handler. Generally, context should be derived at message handling time. Usage is simple: construct, and store, an instance of this class. It will automatically register and configure your underlying netty channel. Then, call registerMessage(Class, Class, int, Side) for each message type you want to exchange providing an IMessageHandler implementation class as well as an IMessage implementation class. The side parameter to that method indicates which side (server or client) the message processing will occur on. The discriminator byte should be unique for this channelName - it is used to discriminate between different types of message that might occur on this channel (a simple form of message channel multiplexing, if you will). To get a packet suitable for presenting to the rest of minecraft, you can call getPacketFrom(IMessage) . The return result is suitable for returning from things like TileEntity#getDescriptionPacket() for example. Finally, use the sendXXX to send unsolicited messages to various classes of recipients. Example // Request message public Message1 implements IMessage { // message structure public fromBytes(ByteBuf buf) { // build message from byte array } public toBytes(ByteBuf buf) { // put message content into byte array } } // Reply message public Message2 implements IMessage { // stuff as before } // Message1Handler expects input of type Message1 and returns type Message2 public Message1Handler implements IMessageHandler { public Message2 onMessage(Message1 message, MessageContext ctx) { // do something and generate reply message return aMessage2Object; } } // Message2Handler expects input of type Message2 and returns no message (IMessage) public Message2Handler implements IMessageHandler { public IMessage onMessage(Message2 message, MessageContext ctx) { // handle the message 2 response message at the other end // no reply for this message - return null return null; } } // Code in a FMLPreInitializationEvent or FMLInitializationEvent handler SimpleNetworkWrapper wrapper = NetworkRegistry.newSimpleChannel(\"MYCHANNEL\"); // Message1 is handled by the Message1Handler class, it has discriminator id 1 and it's on the client wrapper.registerMessage(Message1Handler.class, Message1.class, 1, Side.CLIENT); // Message2 is handled by the Message2Handler class, it has discriminator id 2 and it's on the server wrapper.registerMessage(Message2Handler.class, Message2.class, 2, Side.SERVER); Note: As of Minecraft 1.8 packets are by default handled on the network thread. That means that your IMessageHandler can not interact with most game objects directly. Minecraft provides a convenient way to make your code execute on the main thread instead using IThreadListener.addScheduledTask(Runnable) . The way to obtain an IThreadListener is using either the Minecraft instance (client side) or a WorldServer instance (server side).",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "channels",
      "modifiers": [],
      "type": "",
      "description": "",
      "deprecated": false
    },
    {
      "name": "packetCodec",
      "modifiers": [],
      "type": "",
      "description": "",
      "deprecated": false
    },
    {
      "name": "defaultChannelPipeline",
      "modifiers": [],
      "type": "",
      "description": "",
      "deprecated": false
    },
    {
      "name": "generateName",
      "modifiers": [],
      "type": "",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "SimpleNetworkWrapper",
      "modifiers": [],
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "generateName",
      "modifiers": [
        "private"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "registerMessage",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "instantiate",
      "modifiers": [
        "static"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "registerMessage",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "addServerHandlerAfter",
      "modifiers": [
        "private"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "addClientHandlerAfter",
      "modifiers": [
        "private"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getHandlerWrapper",
      "modifiers": [
        "private"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getPacketFrom",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "sendToAll",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "sendTo",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "sendToAllAround",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "sendToAllTracking",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "sendToAllTracking",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "sendToDimension",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "sendToServer",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.12.2/net/minecraftforge/fml/common/network/simpleimpl/SimpleNetworkWrapper.html"
}