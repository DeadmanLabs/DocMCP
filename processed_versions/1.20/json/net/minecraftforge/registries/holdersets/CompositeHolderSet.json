{
  "type": "class",
  "name": "CompositeHolderSet<T>",
  "qualified_name": "net.minecraftforge.registries.holdersets.CompositeHolderSet<T>",
  "package": "net.minecraftforge.registries.holdersets",
  "modifiers": [
    "public",
    "abstract",
    "class"
  ],
  "annotations": [],
  "description": "Composite holdersets have component holdersets and possibly owner holdersets (which have this holderset as a component). When their component holderset(s) invalidate, they clear any cached data and then invalidate their owner holdersets.",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "owners",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "List < Runnable >",
      "description": "",
      "deprecated": false
    },
    {
      "name": "components",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "List < HolderSet < T >>",
      "description": "",
      "deprecated": false
    },
    {
      "name": "set",
      "modifiers": [
        "private"
      ],
      "type": "@Nullable Set < Holder < T >>",
      "description": "",
      "deprecated": false
    },
    {
      "name": "list",
      "modifiers": [
        "private"
      ],
      "type": "@Nullable List < Holder < T >>",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "CompositeHolderSet",
      "modifiers": [
        "public"
      ],
      "parameters": [
        {
          "name": "components",
          "type": "List < HolderSet < T >>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "createSet",
      "modifiers": [
        "protected",
        "abstract"
      ],
      "return_type": "Set < Holder < T >>",
      "parameters": [],
      "description": "Returns immutable Set of Holders given this composite holderset's component holdersets.",
      "deprecated": false
    },
    {
      "name": "getComponents",
      "modifiers": [
        "public"
      ],
      "return_type": "List < HolderSet < T >>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getSet",
      "modifiers": [
        "public"
      ],
      "return_type": "Set < Holder < T >>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getList",
      "modifiers": [
        "public"
      ],
      "return_type": "List < Holder < T >>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "addInvalidationListener",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "runnable",
          "type": "Runnable",
          "annotations": []
        }
      ],
      "description": "Description copied from interface: IForgeHolderSet",
      "deprecated": false
    },
    {
      "name": "invalidate",
      "modifiers": [
        "private"
      ],
      "return_type": "void",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "stream",
      "modifiers": [
        "public"
      ],
      "return_type": "Stream < Holder < T >>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "size",
      "modifiers": [
        "public"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "unwrap",
      "modifiers": [
        "public"
      ],
      "return_type": "com.mojang.datafixers.util.Either< TagKey < T >, List < Holder < T >>>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getRandomElement",
      "modifiers": [
        "public"
      ],
      "return_type": "Optional < Holder < T >>",
      "parameters": [
        {
          "name": "rand",
          "type": "RandomSource",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "get",
      "modifiers": [
        "public"
      ],
      "return_type": "Holder < T >",
      "parameters": [
        {
          "name": "i",
          "type": "int",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "contains",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "holder",
          "type": "Holder < T >",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "canSerializeIn",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "holderOwner",
          "type": "HolderOwner < T >",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "unwrapKey",
      "modifiers": [
        "public"
      ],
      "return_type": "Optional < TagKey < T >>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "iterator",
      "modifiers": [
        "public"
      ],
      "return_type": "Iterator < Holder < T >>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "homogenize",
      "modifiers": [
        "public"
      ],
      "return_type": "List < HolderSet < T >>",
      "parameters": [],
      "description": "Maps the sub-holdersets of this composite such that, if the list contains more than one element, and is non-homogenous, each element of the list will serialize as an object. Prevents crashes from trying to serialize non-homogenous lists to NBT. Lists are considered non-homogenous if it contains more than one serialization type of holderset. Holdersets may be serialized as strings, lists, or maps.",
      "deprecated": false
    },
    {
      "name": "isHomogenous",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.20/net/minecraftforge/registries/holdersets/CompositeHolderSet.html"
}