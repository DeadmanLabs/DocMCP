{
  "type": "record",
  "name": "IExtensionPoint.DisplayTest",
  "qualified_name": "net.minecraftforge.fml.IExtensionPoint.DisplayTest",
  "package": "net.minecraftforge.fml",
  "modifiers": [
    "public",
    "static",
    "record"
  ],
  "annotations": [],
  "description": "Extension point for the compatibility display test used on the server selection screen. Note: \"server\" and \"client\" refers to the dedicated server and game client physical distributions, rather than the logical server and client . The Supplier provides the local compatibility version, which is sent from the server to the client for multiplayer connections or stored to disk for the world save. The BiPredicate accepts the remote compatibility version and a boolean indicating whether the remote version is from the server or a world save, where true means it is from the server and false means it is from the world save. The return value of the predicate determines whether the remote version is \"compatible\" for the purposes of the display test. The local compatibility version may be of the value NetworkConstants.IGNORESERVERONLY , in which case clients will ignore the mod's presence if it is present on the server but not on the client. However, the remote version test predicate must still accept this value as a remote version in order to display as compatible if the mod is present on the client. The compatibility display test does not necessarily indicate the success or failure of an actual connection attempt. Factors such as display test extension misconfiguration, truncation of ping data, difference of registry data or network channels between server and client, and others may cause the result of the compatibility test to not reflect the actual likelihood of a connection successfully being established between the server and the client. An example declaration of a display test extension registration for a regular mod (requires to be present on server and client) is as follows: String compatibilityVersion = \"1\"; // Could be linked with a network channel version or mod version ModLoadingContext.get().registerExtensionPoint(IExtensionPoint.DisplayTest.class, () -> new IExtensionPoint.DisplayTest( () -> compatibilityVersion, (remoteVersion, isFromServer) -> remoteVersion.equals(compatibilityVersion) ) ); An example declaration of a display test extension registration for a server-side-only mod (does not require to be present on the client) is as follows: ModLoadingContext.get().registerExtensionPoint(IExtensionPoint.DisplayTest.class, () -> new IExtensionPoint.DisplayTest( // Ignore this mod if not present on the client () -> NetworkConstants.IGNORESERVERONLY, // If present on the client, accept any version if from a server (remoteVersion, isFromServer) -> isFromServer ) ); An example declaration of a display test extension registration for a client-side-only mod (does not require to be present on the server) is as follows: ModLoadingContext.get().registerExtensionPoint(IExtensionPoint.DisplayTest.class, () -> new IExtensionPoint.DisplayTest( // Send any version from server to client, since we will be accepting any version as well () -> \"dQw4w9WgXcQ\", // Accept any version on the client, from server or from save (remoteVersion, isFromServer) -> true ) );",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object",
      "java.lang.Record"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "suppliedVersion",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "Supplier < String >",
      "description": "The field for the suppliedVersion record component.",
      "deprecated": false
    },
    {
      "name": "remoteVersionTest",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "BiPredicate < String , Boolean >",
      "description": "The field for the remoteVersionTest record component.",
      "deprecated": false
    },
    {
      "name": "IGNORESERVERONLY",
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "type": "String",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "DisplayTest",
      "modifiers": [
        "public"
      ],
      "parameters": [
        {
          "name": "suppliedVersion",
          "type": "Supplier < String >",
          "annotations": []
        },
        {
          "name": "remoteVersionTest",
          "type": "BiPredicate < String , Boolean >",
          "annotations": []
        }
      ],
      "description": "Creates an instance of a DisplayTest record class.",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "toString",
      "modifiers": [
        "public",
        "final"
      ],
      "return_type": "String",
      "parameters": [],
      "description": "Returns a string representation of this record class. The representation contains the name of the class, followed by the name and value of each of the record components.",
      "deprecated": false
    },
    {
      "name": "hashCode",
      "modifiers": [
        "public",
        "final"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "Returns a hash code value for this object. The value is derived from the hash code of each of the record components.",
      "deprecated": false
    },
    {
      "name": "equals",
      "modifiers": [
        "public",
        "final"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "o",
          "type": "Object",
          "annotations": []
        }
      ],
      "description": "Indicates whether some other object is \"equal to\" this one. The objects are equal if the other object is of the same class and if all the record components are equal. All components in this record class are compared with Objects::equals(Object,Object) .",
      "deprecated": false
    },
    {
      "name": "suppliedVersion",
      "modifiers": [
        "public"
      ],
      "return_type": "Supplier < String >",
      "parameters": [],
      "description": "Returns the value of the suppliedVersion record component.",
      "deprecated": false
    },
    {
      "name": "remoteVersionTest",
      "modifiers": [
        "public"
      ],
      "return_type": "BiPredicate < String , Boolean >",
      "parameters": [],
      "description": "Returns the value of the remoteVersionTest record component.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.20/net/minecraftforge/fml/IExtensionPoint.DisplayTest.html"
}