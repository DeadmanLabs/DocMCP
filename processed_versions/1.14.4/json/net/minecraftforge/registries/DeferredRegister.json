{
  "type": "class",
  "name": "DeferredRegister<T",
  "qualified_name": "DeferredRegister<T",
  "package": "",
  "modifiers": [],
  "annotations": [],
  "description": "Utility class to help with managing registry entries. Maintains a list of all suppliers for entries and registers them during the proper Register event. Suppliers should return NEW instances every time. Example Usage: private static final DeferredRegister ITEMS = new DeferredRegister<>(ForgeRegistries.ITEMS, MODID); private static final DeferredRegister BLOCKS = new DeferredRegister<>(ForgeRegistries.BLOCKS, MODID); public static final RegistryObject ROCK_BLOCK = BLOCKS.register(\"rock\", () -> new Block(Block.Properties.create(Material.ROCK))); public static final RegistryObject ROCK_ITEM = ITEMS.register(\"rock\", () -> new BlockItem(ROCK_BLOCK.get(), new Item.Properties().group(ItemGroup.MISC))); public ExampleMod() { ITEMS.register(FMLJavaModLoadingContext.get().getModEventBus()); BLOCKS.register(FMLJavaModLoadingContext.get().getModEventBus()); }",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [
    {
      "name": "DeferredRegister",
      "modifiers": [],
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "register",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "register",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getEntries",
      "modifiers": [
        "public"
      ],
      "return_type": "",
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.14.4/net/minecraftforge/registries/DeferredRegister.html"
}