{
  "type": "interface",
  "name": "IForgeEntity",
  "qualified_name": "net.minecraftforge.common.extensions.IForgeEntity",
  "package": "net.minecraftforge.common.extensions",
  "modifiers": [
    "public",
    "interface"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": []
  },
  "nested_classes": [],
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "self",
      "modifiers": [
        "private"
      ],
      "return_type": "Entity",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "deserializeNBT",
      "modifiers": [
        "default"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "nbt",
          "type": "CompoundTag",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "serializeNBT",
      "modifiers": [
        "default"
      ],
      "return_type": "CompoundTag",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "canUpdate",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "canUpdate",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "value",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "captureDrops",
      "modifiers": [],
      "return_type": "@Nullable Collection < ItemEntity >",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "captureDrops",
      "modifiers": [],
      "return_type": "Collection < ItemEntity >",
      "parameters": [
        {
          "name": "captureDrops",
          "type": "Collection < ItemEntity >",
          "annotations": [
            "Nullable",
            "Nullable"
          ]
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getPersistentData",
      "modifiers": [],
      "return_type": "CompoundTag",
      "parameters": [],
      "description": "Returns a NBTTagCompound that can be used to store custom data for this entity. It will be written, and read from disc, so it persists over world saves.",
      "deprecated": false
    },
    {
      "name": "shouldRiderSit",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.",
      "deprecated": false
    },
    {
      "name": "getPickedResult",
      "modifiers": [
        "default"
      ],
      "return_type": "ItemStack",
      "parameters": [
        {
          "name": "target",
          "type": "HitResult",
          "annotations": []
        }
      ],
      "description": "Called when a user uses the creative pick block button on this entity.",
      "deprecated": false
    },
    {
      "name": "canRiderInteract",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "If a rider of this entity can interact with this entity. Should return true on the ridden entity if so.",
      "deprecated": false
    },
    {
      "name": "canBeRiddenUnderFluidType",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        },
        {
          "name": "rider",
          "type": "Entity",
          "annotations": []
        }
      ],
      "description": "Returns whether the entity can ride in this vehicle under the fluid.",
      "deprecated": false
    },
    {
      "name": "canTrample",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "state",
          "type": "BlockState",
          "annotations": []
        },
        {
          "name": "pos",
          "type": "BlockPos",
          "annotations": []
        },
        {
          "name": "fallDistance",
          "type": "float",
          "annotations": []
        }
      ],
      "description": "Checks if this Entity can trample a Block .",
      "deprecated": false
    },
    {
      "name": "getClassification",
      "modifiers": [
        "default"
      ],
      "return_type": "MobCategory",
      "parameters": [
        {
          "name": "forSpawnCount",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "Returns The classification of this entity",
      "deprecated": false
    },
    {
      "name": "isAddedToWorld",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [],
      "description": "Gets whether this entity has been added to a world (for tracking). Specifically between the times when an entity is added to a world and the entity being removed from the world's tracked lists.",
      "deprecated": false
    },
    {
      "name": "onAddedToWorld",
      "modifiers": [],
      "return_type": "void",
      "parameters": [],
      "description": "Called after the entity has been added to the world's ticking list. Can be overriden, but needs to call super to prevent MC-136995.",
      "deprecated": false
    },
    {
      "name": "onRemovedFromWorld",
      "modifiers": [],
      "return_type": "void",
      "parameters": [],
      "description": "Called after the entity has been removed to the world's ticking list. Can be overriden, but needs to call super to prevent MC-136995.",
      "deprecated": false
    },
    {
      "name": "revive",
      "modifiers": [],
      "return_type": "void",
      "parameters": [],
      "description": "Revives an entity that has been removed from a world. Used as replacement for entity.removed = true. Having it as a function allows the entity to react to being revived.",
      "deprecated": false
    },
    {
      "name": "isMultipartEntity",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "This is used to specify that your entity has multiple individual parts, such as the Vanilla Ender Dragon. See EnderDragon for an example implementation.",
      "deprecated": false
    },
    {
      "name": "getParts",
      "modifiers": [
        "default"
      ],
      "return_type": "@Nullable PartEntity <?>[]",
      "parameters": [],
      "description": "Gets the individual sub parts that make up this entity. The entities returned by this method are NOT saved to the world in nay way, they exist as an extension of their host entity. The child entity does not track its server-side(or client-side) counterpart, and the host entity is responsible for moving and managing these children. Only used if isMultipartEntity() returns true. See EnderDragon for an example implementation.",
      "deprecated": false
    },
    {
      "name": "getStepHeight",
      "modifiers": [
        "default"
      ],
      "return_type": "float",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getFluidTypeHeight",
      "modifiers": [],
      "return_type": "double",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns the height of the fluid type in relation to the bounding box of the entity. If the entity is not in the fluid type, then 0 is returned.",
      "deprecated": false
    },
    {
      "name": "getMaxHeightFluidType",
      "modifiers": [],
      "return_type": "FluidType",
      "parameters": [],
      "description": "Returns the fluid type which is the highest on the bounding box of the entity.",
      "deprecated": false
    },
    {
      "name": "isInFluidType",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "state",
          "type": "FluidState",
          "annotations": []
        }
      ],
      "description": "Returns whether the entity is within the fluid type of the state.",
      "deprecated": false
    },
    {
      "name": "isInFluidType",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns whether the entity is within the fluid type.",
      "deprecated": false
    },
    {
      "name": "isInFluidType",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "predicate",
          "type": "BiPredicate < FluidType , Double >",
          "annotations": []
        }
      ],
      "description": "Returns whether any fluid type the entity is currently in matches the specified condition.",
      "deprecated": false
    },
    {
      "name": "isInFluidType",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "predicate",
          "type": "BiPredicate < FluidType , Double >",
          "annotations": []
        },
        {
          "name": "forAllTypes",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "Returns whether the fluid type the entity is currently in matches the specified condition.",
      "deprecated": false
    },
    {
      "name": "isInFluidType",
      "modifiers": [],
      "return_type": "boolean",
      "parameters": [],
      "description": "Returns whether the entity is in a fluid.",
      "deprecated": false
    },
    {
      "name": "getEyeInFluidType",
      "modifiers": [],
      "return_type": "FluidType",
      "parameters": [],
      "description": "Returns the fluid that is on the entity's eyes.",
      "deprecated": false
    },
    {
      "name": "isEyeInFluidType",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns whether the fluid is on the entity's eyes.",
      "deprecated": false
    },
    {
      "name": "canStartSwimming",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "Returns whether the entity can start swimming in the fluid.",
      "deprecated": false
    },
    {
      "name": "getFluidMotionScale",
      "modifiers": [
        "default"
      ],
      "return_type": "double",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns how much the velocity of the fluid should be scaled by when applied to an entity.",
      "deprecated": false
    },
    {
      "name": "isPushedByFluid",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns whether the fluid can push an entity.",
      "deprecated": false
    },
    {
      "name": "canSwimInFluidType",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns whether the entity can swim in the fluid.",
      "deprecated": false
    },
    {
      "name": "canFluidExtinguish",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns whether the entity can be extinguished by this fluid.",
      "deprecated": false
    },
    {
      "name": "getFluidFallDistanceModifier",
      "modifiers": [
        "default"
      ],
      "return_type": "float",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns how much the fluid should scale the damage done to a falling entity when hitting the ground per tick. Implementation: If the entity is in many fluids, the smallest modifier is applied.",
      "deprecated": false
    },
    {
      "name": "canHydrateInFluidType",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        }
      ],
      "description": "Returns whether the entity can be hydrated by this fluid. Hydration is an arbitrary word which depends on the entity.",
      "deprecated": false
    },
    {
      "name": "getSoundFromFluidType",
      "modifiers": [
        "default"
      ],
      "return_type": "@Nullable SoundEvent",
      "parameters": [
        {
          "name": "type",
          "type": "FluidType",
          "annotations": []
        },
        {
          "name": "action",
          "type": "SoundAction",
          "annotations": []
        }
      ],
      "description": "Returns a sound to play when a certain action is performed by the entity in the fluid. If no sound is present, then the sound will be null .",
      "deprecated": false
    },
    {
      "name": "hasCustomOutlineRendering",
      "modifiers": [
        "default"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "player",
          "type": "Player",
          "annotations": []
        }
      ],
      "description": "Returns whether this Entity has custom outline rendering behavior which does not use the existing automatic outline rendering based on Entity.isCurrentlyGlowing() and the entity's team color.",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.19.4/net/minecraftforge/common/extensions/IForgeEntity.html"
}