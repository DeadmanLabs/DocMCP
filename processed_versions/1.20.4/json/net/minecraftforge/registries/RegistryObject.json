{
  "type": "class",
  "name": "RegistryObject<T>",
  "qualified_name": "net.minecraftforge.registries.RegistryObject<T>",
  "package": "net.minecraftforge.registries",
  "modifiers": [
    "public",
    "final",
    "class"
  ],
  "annotations": [],
  "description": "",
  "inheritance": {
    "extends": null,
    "implements": [],
    "inheritance_tree": [
      "java.lang.Object"
    ]
  },
  "nested_classes": [],
  "fields": [
    {
      "name": "name",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "@Nullable ResourceLocation",
      "description": "",
      "deprecated": false
    },
    {
      "name": "key",
      "modifiers": [
        "private"
      ],
      "type": "@Nullable ResourceKey < T >",
      "description": "",
      "deprecated": false
    },
    {
      "name": "optionalRegistry",
      "modifiers": [
        "private",
        "final"
      ],
      "type": "boolean",
      "description": "",
      "deprecated": false
    },
    {
      "name": "value",
      "modifiers": [
        "private"
      ],
      "type": "T",
      "description": "",
      "deprecated": false
    },
    {
      "name": "holder",
      "modifiers": [
        "private"
      ],
      "type": "@Nullable Holder < T >",
      "description": "",
      "deprecated": false
    },
    {
      "name": "EMPTY",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": "RegistryObject <?>",
      "description": "",
      "deprecated": false
    }
  ],
  "constructors": [
    {
      "name": "RegistryObject",
      "modifiers": [
        "private"
      ],
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "RegistryObject",
      "modifiers": [
        "private"
      ],
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registry",
          "type": "IForgeRegistry <?>",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "RegistryObject",
      "modifiers": [
        "private"
      ],
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        },
        {
          "name": "optionalRegistry",
          "type": "boolean",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    }
  ],
  "methods": [
    {
      "name": "create",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "RegistryObject <U>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registry",
          "type": "IForgeRegistry <T>",
          "annotations": []
        }
      ],
      "description": "Factory for a RegistryObject that stores the value of an object from the provided forge registry once it is ready.",
      "deprecated": false
    },
    {
      "name": "create",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "RegistryObject <U>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registryKey",
          "type": "ResourceKey <? extends Registry <T>>",
          "annotations": []
        },
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "Factory for a RegistryObject that stores the value of an object from a registry once it is ready based on a lookup of the provided registry key. If a registry with the given key cannot be found, an exception will be thrown when trying to fill this RegistryObject. Use createOptional(ResourceLocation, ResourceKey, String) for RegistryObjects of optional registries.",
      "deprecated": false
    },
    {
      "name": "createOptional",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "RegistryObject <U>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registryKey",
          "type": "ResourceKey <? extends Registry <T>>",
          "annotations": []
        },
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "Factory for a RegistryObject that optionally stores the value of an object from a registry once it is ready if the registry exists based on a lookup of the provided registry key. If a registry with the given key cannot be found, it will be silently ignored and this RegistryObject will not be filled. Use create(ResourceLocation, ResourceKey, String) for RegistryObjects that should throw exceptions on missing registry.",
      "deprecated": false
    },
    {
      "name": "create",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "RegistryObject <U>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "Factory for a RegistryObject that stores the value of an object from a registry once it is ready based on a lookup of the provided registry name. If a registry with the given name cannot be found, an exception will be thrown when trying to fill this RegistryObject. Use createOptional(ResourceLocation, ResourceLocation, String) for RegistryObjects of optional registries.",
      "deprecated": false
    },
    {
      "name": "createOptional",
      "modifiers": [
        "public",
        "static"
      ],
      "return_type": "RegistryObject <U>",
      "parameters": [
        {
          "name": "name",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        },
        {
          "name": "modid",
          "type": "String",
          "annotations": []
        }
      ],
      "description": "Factory for a RegistryObject that optionally stores the value of an object from a registry once it is ready if the registry exists based on a lookup of the provided registry name. If a registry with the given name cannot be found, it will be silently ignored and this RegistryObject will not be filled. Use create(ResourceLocation, ResourceLocation, String) for RegistryObjects that should throw exceptions on missing registry.",
      "deprecated": false
    },
    {
      "name": "empty",
      "modifiers": [
        "private",
        "static"
      ],
      "return_type": "RegistryObject <T>",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "get",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [],
      "description": "Retrieves the wrapped object in the registry. This value will automatically be updated when the backing registry is updated.",
      "deprecated": false
    },
    {
      "name": "updateReference",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "registry",
          "type": "IForgeRegistry <? extends T >",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "updateReference",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "registry",
          "type": "Registry <? extends T >",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "updateReference",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "updateReference",
      "modifiers": [],
      "return_type": "void",
      "parameters": [
        {
          "name": "event",
          "type": "RegisterEvent",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "registryExists",
      "modifiers": [
        "private",
        "static"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "registryName",
          "type": "ResourceLocation",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getId",
      "modifiers": [
        "public"
      ],
      "return_type": "ResourceLocation",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "getKey",
      "modifiers": [
        "public"
      ],
      "return_type": "@Nullable ResourceKey < T >",
      "parameters": [],
      "description": "Returns the resource key that points to the registry and name of this registry object. Nullable only if this RegistryObject is empty and has no name.",
      "deprecated": false
    },
    {
      "name": "stream",
      "modifiers": [
        "public"
      ],
      "return_type": "Stream < T >",
      "parameters": [],
      "description": "",
      "deprecated": false
    },
    {
      "name": "isPresent",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [],
      "description": "Return true if there is a mod object present, otherwise false .",
      "deprecated": false
    },
    {
      "name": "ifPresent",
      "modifiers": [
        "public"
      ],
      "return_type": "void",
      "parameters": [
        {
          "name": "consumer",
          "type": "Consumer <? super T >",
          "annotations": []
        }
      ],
      "description": "If a mod object is present, invoke the specified consumer with the object, otherwise do nothing.",
      "deprecated": false
    },
    {
      "name": "filter",
      "modifiers": [
        "public"
      ],
      "return_type": "RegistryObject < T >",
      "parameters": [
        {
          "name": "predicate",
          "type": "Predicate <? super T >",
          "annotations": []
        }
      ],
      "description": "If a mod object is present, and the mod object matches the given predicate, return an RegistryObject describing the value, otherwise return an empty RegistryObject .",
      "deprecated": false
    },
    {
      "name": "map",
      "modifiers": [
        "public"
      ],
      "return_type": "Optional <U>",
      "parameters": [
        {
          "name": "mapper",
          "type": "Function <? super T , ? extends U>",
          "annotations": []
        }
      ],
      "description": "If a mod object is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result. Otherwise return an empty Optional .",
      "deprecated": false
    },
    {
      "name": "flatMap",
      "modifiers": [
        "public"
      ],
      "return_type": "Optional <U>",
      "parameters": [
        {
          "name": "mapper",
          "type": "Function <? super T , Optional <U>>",
          "annotations": []
        }
      ],
      "description": "If a value is present, apply the provided Optional -bearing mapping function to it, return that result, otherwise return an empty Optional . This method is similar to map(Function) , but the provided mapper is one whose result is already an Optional , and if invoked, flatMap does not wrap it with an additional Optional .",
      "deprecated": false
    },
    {
      "name": "lazyMap",
      "modifiers": [
        "public"
      ],
      "return_type": "Supplier <U>",
      "parameters": [
        {
          "name": "mapper",
          "type": "Function <? super T , ? extends U>",
          "annotations": []
        }
      ],
      "description": "If a mod object is present, lazily apply the provided mapping function to it, returning a supplier for the transformed result. If this object is empty, or the mapping function returns null , the supplier will return null .",
      "deprecated": false
    },
    {
      "name": "orElse",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "other",
          "type": "T",
          "annotations": []
        }
      ],
      "description": "Return the mod object if present, otherwise return other .",
      "deprecated": false
    },
    {
      "name": "orElseGet",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "other",
          "type": "Supplier <? extends T >",
          "annotations": []
        }
      ],
      "description": "Return the mod object if present, otherwise invoke other and return the result of that invocation.",
      "deprecated": false
    },
    {
      "name": "orElseThrow",
      "modifiers": [
        "public"
      ],
      "return_type": "T",
      "parameters": [
        {
          "name": "exceptionSupplier",
          "type": "Supplier <? extends X>",
          "annotations": []
        }
      ],
      "description": "Return the contained mod object, if present, otherwise throw an exception to be created by the provided supplier.",
      "deprecated": false
    },
    {
      "name": "getHolder",
      "modifiers": [
        "public"
      ],
      "return_type": "@NotNull Optional < Holder < T >>",
      "parameters": [],
      "description": "Returns an optional Holder instance pointing to this RegistryObject's name and value. This should only be used in cases where vanilla code requires passing in a Holder. Mod-written code should rely on RegistryObjects or Suppliers instead. The returned optional will be empty if the registry does not exist or if returns false .",
      "deprecated": false
    },
    {
      "name": "equals",
      "modifiers": [
        "public"
      ],
      "return_type": "boolean",
      "parameters": [
        {
          "name": "obj",
          "type": "Object",
          "annotations": []
        }
      ],
      "description": "",
      "deprecated": false
    },
    {
      "name": "hashCode",
      "modifiers": [
        "public"
      ],
      "return_type": "int",
      "parameters": [],
      "description": "",
      "deprecated": false
    }
  ],
  "enum_constants": [],
  "since": null,
  "deprecated": false,
  "source_file": "Frameworks/1.20.4/net/minecraftforge/registries/RegistryObject.html"
}